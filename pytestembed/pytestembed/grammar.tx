// PyTestEmbed Grammar Definition
// Defines the syntax for embedded test and documentation blocks

Program:
    items*=ProgramItem
;

ProgramItem:
    ClassDef | FunctionDef | TestBlock | DocBlock | Statement
;

ClassDef:
    'class' name=ID ':' NEWLINE
    INDENT
        items*=ClassItem
    DEDENT
;

ClassItem:
    MethodDef | TestBlock | DocBlock | Statement
;

MethodDef:
    'def' name=ID '(' parameters=Parameters ')' ':' NEWLINE
    INDENT
        items*=MethodItem
    DEDENT
;

MethodItem:
    TestBlock | DocBlock | Statement
;

FunctionDef:
    'def' name=ID '(' parameters=Parameters ')' ':' NEWLINE
    INDENT
        items*=FunctionItem
    DEDENT
;

FunctionItem:
    TestBlock | DocBlock | Statement
;

TestBlock:
    'test' ':' NEWLINE
    INDENT
        test_cases*=TestCase
    DEDENT
;

TestCase:
    statements*=Statement
    assertion=Assertion ','?
;

Assertion:
    left=Expression '==' right=Expression ':' message=STRING
;

DocBlock:
    'doc' ':' NEWLINE
    INDENT
        content*=DocLine
    DEDENT
;

DocLine:
    text=TEXT_LINE
;

Parameters:
    params*=Parameter[',']
;

Parameter:
    name=ID ('=' default=Expression)?
;

Statement:
    assignment=Assignment | expression=Expression
;

Assignment:
    target=ID '=' value=Expression
;

Expression:
    term=Term (op=BinaryOp right=Expression)?
;

BinaryOp:
    '+' | '-' | '*' | '/' | '==' | '!=' | '<' | '>' | '<=' | '>='
;

Term:
    function_call=FunctionCall | 
    method_call=MethodCall |
    attribute=Attribute |
    literal=Literal |
    identifier=ID |
    '(' expr=Expression ')'
;

FunctionCall:
    name=ID '(' args*=Expression[','] ')'
;

MethodCall:
    object=ID '.' method=ID '(' args*=Expression[','] ')'
;

Attribute:
    object=ID '.' attr=ID
;

Literal:
    number=NUMBER | string=STRING | boolean=BOOL
;

terminals

ID: /[a-zA-Z_][a-zA-Z0-9_]*/;
NUMBER: /[+-]?[0-9]+(\.[0-9]+)?/;
STRING: /"[^"]*"/;
BOOL: 'True' | 'False';
TEXT_LINE: /[^\n\r]+/;
NEWLINE: /\r?\n/;
INDENT: /^[ \t]+/;
DEDENT: /^[ \t]*/;
