{
  "elements": {
    "pytestembed/setup.py:read_readme": {
      "name": "read_readme",
      "file": "pytestembed/setup.py",
      "line": 8,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/runner.py:TestRunner": {
      "name": "TestRunner",
      "file": "pytestembed/pytestembed/runner.py",
      "line": 16,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/runner.py:TestRunner.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/runner.py",
      "line": 19,
      "type": "method",
      "parent_class": "TestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/runner.py:TestRunner.run_tests_from_file": {
      "name": "run_tests_from_file",
      "file": "pytestembed/pytestembed/runner.py",
      "line": 31,
      "type": "method",
      "parent_class": "TestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/runner.py:TestRunner.run_tests": {
      "name": "run_tests",
      "file": "pytestembed/pytestembed/runner.py",
      "line": 60,
      "type": "method",
      "parent_class": "TestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/runner.py:TestRunner._execute_tests": {
      "name": "_execute_tests",
      "file": "pytestembed/pytestembed/runner.py",
      "line": 85,
      "type": "method",
      "parent_class": "TestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/runner.py:TestRunner._remove_test_doc_blocks": {
      "name": "_remove_test_doc_blocks",
      "file": "pytestembed/pytestembed/runner.py",
      "line": 155,
      "type": "method",
      "parent_class": "TestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/runner.py:TestRunner._get_cached_program": {
      "name": "_get_cached_program",
      "file": "pytestembed/pytestembed/runner.py",
      "line": 191,
      "type": "method",
      "parent_class": "TestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/runner.py:TestRunner._cache_program": {
      "name": "_cache_program",
      "file": "pytestembed/pytestembed/runner.py",
      "line": 200,
      "type": "method",
      "parent_class": "TestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter": {
      "name": "PyTestEmbedFormatter",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 17,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 20,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter.format_file": {
      "name": "format_file",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 38,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter.format_content": {
      "name": "format_content",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 56,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_test_block": {
      "name": "_format_test_block",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 87,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._looks_like_test_case": {
      "name": "_looks_like_test_case",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 121,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_test_cases": {
      "name": "_format_test_cases",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 129,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._is_complete_test_case": {
      "name": "_is_complete_test_case",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 174,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_single_test_case": {
      "name": "_format_single_test_case",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 181,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_expression": {
      "name": "_format_expression",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 210,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._normalize_quotes": {
      "name": "_normalize_quotes",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 234,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_doc_block": {
      "name": "_format_doc_block",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 247,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_documentation": {
      "name": "_format_documentation",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 272,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._post_process": {
      "name": "_post_process",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 306,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter.configure": {
      "name": "configure",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 327,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter.check_formatting": {
      "name": "check_formatting",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 331,
      "type": "method",
      "parent_class": "PyTestEmbedFormatter",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedStyleGuide": {
      "name": "PyTestEmbedStyleGuide",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 337,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedStyleGuide.get_style_recommendations": {
      "name": "get_style_recommendations",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 341,
      "type": "method",
      "parent_class": "PyTestEmbedStyleGuide",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:PyTestEmbedStyleGuide.get_example_formatting": {
      "name": "get_example_formatting",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 355,
      "type": "method",
      "parent_class": "PyTestEmbedStyleGuide",
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:format_file": {
      "name": "format_file",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 383,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/formatter.py:format_directory": {
      "name": "format_directory",
      "file": "pytestembed/pytestembed/formatter.py",
      "line": 392,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyTestCase": {
      "name": "PropertyTestCase",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 20,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyTestResult": {
      "name": "PropertyTestResult",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 31,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:InputGenerator": {
      "name": "InputGenerator",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 41,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:InputGenerator.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 44,
      "type": "method",
      "parent_class": "InputGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:InputGenerator.generate_inputs": {
      "name": "generate_inputs",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 55,
      "type": "method",
      "parent_class": "InputGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_value": {
      "name": "_generate_value",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 81,
      "type": "method",
      "parent_class": "InputGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_int": {
      "name": "_generate_int",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 93,
      "type": "method",
      "parent_class": "InputGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_float": {
      "name": "_generate_float",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 101,
      "type": "method",
      "parent_class": "InputGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_string": {
      "name": "_generate_string",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 109,
      "type": "method",
      "parent_class": "InputGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_bool": {
      "name": "_generate_bool",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 119,
      "type": "method",
      "parent_class": "InputGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_list": {
      "name": "_generate_list",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 123,
      "type": "method",
      "parent_class": "InputGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_dict": {
      "name": "_generate_dict",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 132,
      "type": "method",
      "parent_class": "InputGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_generic_type": {
      "name": "_generate_generic_type",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 145,
      "type": "method",
      "parent_class": "InputGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyChecker": {
      "name": "PropertyChecker",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 158,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyChecker.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 161,
      "type": "method",
      "parent_class": "PropertyChecker",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyChecker.check_property": {
      "name": "check_property",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 166,
      "type": "method",
      "parent_class": "PropertyChecker",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyTestParser": {
      "name": "PropertyTestParser",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 221,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyTestParser.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 224,
      "type": "method",
      "parent_class": "PropertyTestParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyTestParser.extract_properties": {
      "name": "extract_properties",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 233,
      "type": "method",
      "parent_class": "PropertyTestParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyTestParser._parse_property_line": {
      "name": "_parse_property_line",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 248,
      "type": "method",
      "parent_class": "PropertyTestParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyBasedTester": {
      "name": "PropertyBasedTester",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 274,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyBasedTester.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 277,
      "type": "method",
      "parent_class": "PropertyBasedTester",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyBasedTester.run_property_tests": {
      "name": "run_property_tests",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 283,
      "type": "method",
      "parent_class": "PropertyBasedTester",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyBasedTester._create_property_function": {
      "name": "_create_property_function",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 321,
      "type": "method",
      "parent_class": "PropertyBasedTester",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:PropertyBasedTester.generate_property_suggestions": {
      "name": "generate_property_suggestions",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 367,
      "type": "method",
      "parent_class": "PropertyBasedTester",
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:extend_pytestembed_with_properties": {
      "name": "extend_pytestembed_with_properties",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 419,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/property_testing.py:run_property_testing": {
      "name": "run_property_testing",
      "file": "pytestembed/pytestembed/property_testing.py",
      "line": 428,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:MigrationRule": {
      "name": "MigrationRule",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 22,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator": {
      "name": "PyTestEmbedMigrator",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 32,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 35,
      "type": "method",
      "parent_class": "PyTestEmbedMigrator",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._load_migration_rules": {
      "name": "_load_migration_rules",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 46,
      "type": "method",
      "parent_class": "PyTestEmbedMigrator",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.migrate_file": {
      "name": "migrate_file",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 74,
      "type": "method",
      "parent_class": "PyTestEmbedMigrator",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.migrate_directory": {
      "name": "migrate_directory",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 111,
      "type": "method",
      "parent_class": "PyTestEmbedMigrator",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._detect_version": {
      "name": "_detect_version",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 124,
      "type": "method",
      "parent_class": "PyTestEmbedMigrator",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._apply_migrations": {
      "name": "_apply_migrations",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 145,
      "type": "method",
      "parent_class": "PyTestEmbedMigrator",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._find_migration_path": {
      "name": "_find_migration_path",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 177,
      "type": "method",
      "parent_class": "PyTestEmbedMigrator",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._create_backup": {
      "name": "_create_backup",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 199,
      "type": "method",
      "parent_class": "PyTestEmbedMigrator",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._is_pytestembed_file": {
      "name": "_is_pytestembed_file",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 205,
      "type": "method",
      "parent_class": "PyTestEmbedMigrator",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.generate_migration_report": {
      "name": "generate_migration_report",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 218,
      "type": "method",
      "parent_class": "PyTestEmbedMigrator",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.validate_migration": {
      "name": "validate_migration",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 257,
      "type": "method",
      "parent_class": "PyTestEmbedMigrator",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:LegacyConverter": {
      "name": "LegacyConverter",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 296,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:LegacyConverter.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 299,
      "type": "method",
      "parent_class": "LegacyConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:LegacyConverter.convert_unittest_file": {
      "name": "convert_unittest_file",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 302,
      "type": "method",
      "parent_class": "LegacyConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:LegacyConverter.convert_pytest_file": {
      "name": "convert_pytest_file",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 309,
      "type": "method",
      "parent_class": "LegacyConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:migrate_file": {
      "name": "migrate_file",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 317,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:migrate_project": {
      "name": "migrate_project",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 323,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/migration_tool.py:generate_migration_report": {
      "name": "generate_migration_report",
      "file": "pytestembed/pytestembed/migration_tool.py",
      "line": 329,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:CodeContext": {
      "name": "CodeContext",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 18,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:GenerationRequest": {
      "name": "GenerationRequest",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 34,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer": {
      "name": "SmartCodeAnalyzer",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 43,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 46,
      "type": "method",
      "parent_class": "SmartCodeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer.analyze_function": {
      "name": "analyze_function",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 56,
      "type": "method",
      "parent_class": "SmartCodeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer._remove_pytestembed_blocks": {
      "name": "_remove_pytestembed_blocks",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 96,
      "type": "method",
      "parent_class": "SmartCodeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer._extract_function_source": {
      "name": "_extract_function_source",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 133,
      "type": "method",
      "parent_class": "SmartCodeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer._find_function_at_line": {
      "name": "_find_function_at_line",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 190,
      "type": "method",
      "parent_class": "SmartCodeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer._extract_function_context": {
      "name": "_extract_function_context",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 201,
      "type": "method",
      "parent_class": "SmartCodeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer._calculate_complexity": {
      "name": "_calculate_complexity",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 261,
      "type": "method",
      "parent_class": "SmartCodeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator": {
      "name": "SmartCodeGenerator",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 283,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 286,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator.generate_for_function": {
      "name": "generate_for_function",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 295,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_both": {
      "name": "_generate_both",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 332,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_tests": {
      "name": "_generate_tests",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 358,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_documentation": {
      "name": "_generate_documentation",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 381,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._create_test_prompt": {
      "name": "_create_test_prompt",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 404,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._create_combined_prompt": {
      "name": "_create_combined_prompt",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 495,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._get_test_schema": {
      "name": "_get_test_schema",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 581,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._get_combined_schema": {
      "name": "_get_combined_schema",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 617,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._create_doc_prompt": {
      "name": "_create_doc_prompt",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 672,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._get_doc_schema": {
      "name": "_get_doc_schema",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 763,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_structured_test_response": {
      "name": "_format_structured_test_response",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 792,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_structured_doc_response": {
      "name": "_format_structured_doc_response",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 819,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_combined_response": {
      "name": "_format_combined_response",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 848,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_test_response": {
      "name": "_format_test_response",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 907,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_doc_response": {
      "name": "_format_doc_response",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 939,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_template_tests": {
      "name": "_generate_template_tests",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 973,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_template_documentation": {
      "name": "_generate_template_documentation",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 988,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._get_style_preferences": {
      "name": "_get_style_preferences",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 1004,
      "type": "method",
      "parent_class": "SmartCodeGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_generator.py:generate_smart_blocks": {
      "name": "generate_smart_blocks",
      "file": "pytestembed/pytestembed/smart_generator.py",
      "line": 1015,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:AIProviderConfig": {
      "name": "AIProviderConfig",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 16,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:PyTestEmbedConfig": {
      "name": "PyTestEmbedConfig",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 29,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager": {
      "name": "ConfigManager",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 62,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 65,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_config": {
      "name": "_get_default_config",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 70,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_test_prompt": {
      "name": "_get_default_test_prompt",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 80,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_doc_prompt": {
      "name": "_get_default_doc_prompt",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 98,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_conversion_prompt": {
      "name": "_get_default_conversion_prompt",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 116,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_unified_docs_prompt": {
      "name": "_get_default_unified_docs_prompt",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 128,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager._load_config": {
      "name": "_load_config",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 142,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager.save_config": {
      "name": "save_config",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 169,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager.get_ai_provider_config": {
      "name": "get_ai_provider_config",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 188,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager.set_ai_provider": {
      "name": "set_ai_provider",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 192,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager.get_custom_prompt": {
      "name": "get_custom_prompt",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 200,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager.set_custom_prompt": {
      "name": "set_custom_prompt",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 210,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager.get_available_models": {
      "name": "get_available_models",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 221,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager._get_ollama_models": {
      "name": "_get_ollama_models",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 229,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager._get_lmstudio_models": {
      "name": "_get_lmstudio_models",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 244,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager.test_ai_connection": {
      "name": "test_ai_connection",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 259,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager.reset_to_defaults": {
      "name": "reset_to_defaults",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 288,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager.export_config": {
      "name": "export_config",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 292,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:ConfigManager.import_config": {
      "name": "import_config",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 302,
      "type": "method",
      "parent_class": "ConfigManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_manager.py:get_config_manager": {
      "name": "get_config_manager",
      "file": "pytestembed/pytestembed/config_manager.py",
      "line": 320,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:TestResult": {
      "name": "TestResult",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 29,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:FileTestResults": {
      "name": "FileTestResults",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 43,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestRunner": {
      "name": "LiveTestRunner",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 53,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestRunner.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 56,
      "type": "method",
      "parent_class": "LiveTestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestRunner.remove_pytestembed_blocks": {
      "name": "remove_pytestembed_blocks",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 453,
      "type": "method",
      "parent_class": "LiveTestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestRunner.mock_function": {
      "name": "mock_function",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 610,
      "type": "method",
      "parent_class": "LiveTestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestRunner.transform_assertion_for_context": {
      "name": "transform_assertion_for_context",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 678,
      "type": "method",
      "parent_class": "LiveTestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestRunner._transform_for_class_instance": {
      "name": "_transform_for_class_instance",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 697,
      "type": "method",
      "parent_class": "LiveTestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestRunner.find_class_name_for_method": {
      "name": "find_class_name_for_method",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 720,
      "type": "method",
      "parent_class": "LiveTestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestRunner.start_file_watcher": {
      "name": "start_file_watcher",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 861,
      "type": "method",
      "parent_class": "LiveTestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestRunner.stop": {
      "name": "stop",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 926,
      "type": "method",
      "parent_class": "LiveTestRunner",
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestClient": {
      "name": "LiveTestClient",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 934,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestClient.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 937,
      "type": "method",
      "parent_class": "LiveTestClient",
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestClient.on_test_results": {
      "name": "on_test_results",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 977,
      "type": "method",
      "parent_class": "LiveTestClient",
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestClient.on_test_start": {
      "name": "on_test_start",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 981,
      "type": "method",
      "parent_class": "LiveTestClient",
      "has_tests": false
    },
    "pytestembed/pytestembed/live_runner.py:LiveTestClient.on_coverage": {
      "name": "on_coverage",
      "file": "pytestembed/pytestembed/live_runner.py",
      "line": 985,
      "type": "method",
      "parent_class": "LiveTestClient",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheEntry": {
      "name": "CacheEntry",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 21,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager": {
      "name": "CacheManager",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 32,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 35,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager._get_file_hash": {
      "name": "_get_file_hash",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 61,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_key": {
      "name": "_get_cache_key",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 70,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_file_path": {
      "name": "_get_cache_file_path",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 74,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager._save_cache_entry": {
      "name": "_save_cache_entry",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 85,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager._load_cache_entry": {
      "name": "_load_cache_entry",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 95,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager._is_cache_valid": {
      "name": "_is_cache_valid",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 113,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager.get_parsed_file_cache": {
      "name": "get_parsed_file_cache",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 128,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager.set_parsed_file_cache": {
      "name": "set_parsed_file_cache",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 155,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager.get_ai_generation_cache": {
      "name": "get_ai_generation_cache",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 181,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager.set_ai_generation_cache": {
      "name": "set_ai_generation_cache",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 207,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager.get_test_results_cache": {
      "name": "get_test_results_cache",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 232,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager.set_test_results_cache": {
      "name": "set_test_results_cache",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 257,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager._cleanup_memory_cache": {
      "name": "_cleanup_memory_cache",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 283,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager.cleanup_cache": {
      "name": "cleanup_cache",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 300,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager._cleanup_directory": {
      "name": "_cleanup_directory",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 323,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager.get_cache_stats": {
      "name": "get_cache_stats",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 351,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager.clear_cache": {
      "name": "clear_cache",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 373,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:CacheManager._clear_directory": {
      "name": "_clear_directory",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 390,
      "type": "method",
      "parent_class": "CacheManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/cache_manager.py:get_cache_manager": {
      "name": "get_cache_manager",
      "file": "pytestembed/pytestembed/cache_manager.py",
      "line": 405,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator": {
      "name": "AITestGenerator",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 13,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 16,
      "type": "method",
      "parent_class": "AITestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator.generate_tests": {
      "name": "generate_tests",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 20,
      "type": "method",
      "parent_class": "AITestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator._create_test_prompt": {
      "name": "_create_test_prompt",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 45,
      "type": "method",
      "parent_class": "AITestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator._extract_function_source": {
      "name": "_extract_function_source",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 90,
      "type": "method",
      "parent_class": "AITestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator._parse_ai_response": {
      "name": "_parse_ai_response",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 102,
      "type": "method",
      "parent_class": "AITestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator._generate_fallback_tests": {
      "name": "_generate_fallback_tests",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 134,
      "type": "method",
      "parent_class": "AITestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator": {
      "name": "SmartTestGenerator",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 156,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 159,
      "type": "method",
      "parent_class": "SmartTestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator.generate_comprehensive_tests": {
      "name": "generate_comprehensive_tests",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 162,
      "type": "method",
      "parent_class": "SmartTestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator._analyze_function": {
      "name": "_analyze_function",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 171,
      "type": "method",
      "parent_class": "SmartTestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator._generate_enhanced_ai_tests": {
      "name": "_generate_enhanced_ai_tests",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 202,
      "type": "method",
      "parent_class": "SmartTestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator._create_enhanced_prompt": {
      "name": "_create_enhanced_prompt",
      "file": "pytestembed/pytestembed/ai_test_generator.py",
      "line": 222,
      "type": "method",
      "parent_class": "SmartTestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeElement": {
      "name": "CodeElement",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 22,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:DependencyEdge": {
      "name": "DependencyEdge",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 37,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph": {
      "name": "CodeDependencyGraph",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 45,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 48,
      "type": "method",
      "parent_class": "CodeDependencyGraph",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.build_graph": {
      "name": "build_graph",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 55,
      "type": "method",
      "parent_class": "CodeDependencyGraph",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._should_skip_file": {
      "name": "_should_skip_file",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 73,
      "type": "method",
      "parent_class": "CodeDependencyGraph",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._analyze_file": {
      "name": "_analyze_file",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 81,
      "type": "method",
      "parent_class": "CodeDependencyGraph",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._resolve_dependencies": {
      "name": "_resolve_dependencies",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 96,
      "type": "method",
      "parent_class": "CodeDependencyGraph",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._resolve_call": {
      "name": "_resolve_call",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 112,
      "type": "method",
      "parent_class": "CodeDependencyGraph",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._identify_dead_code": {
      "name": "_identify_dead_code",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 132,
      "type": "method",
      "parent_class": "CodeDependencyGraph",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.get_dependencies": {
      "name": "get_dependencies",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 147,
      "type": "method",
      "parent_class": "CodeDependencyGraph",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.get_dependents": {
      "name": "get_dependents",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 155,
      "type": "method",
      "parent_class": "CodeDependencyGraph",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.get_test_impact": {
      "name": "get_test_impact",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 159,
      "type": "method",
      "parent_class": "CodeDependencyGraph",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.get_element_info": {
      "name": "get_element_info",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 178,
      "type": "method",
      "parent_class": "CodeDependencyGraph",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.export_graph": {
      "name": "export_graph",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 187,
      "type": "method",
      "parent_class": "CodeDependencyGraph",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeElementVisitor": {
      "name": "CodeElementVisitor",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 216,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeElementVisitor.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 219,
      "type": "method",
      "parent_class": "CodeElementVisitor",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeElementVisitor.visit_ClassDef": {
      "name": "visit_ClassDef",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 225,
      "type": "method",
      "parent_class": "CodeElementVisitor",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:CodeElementVisitor.visit_FunctionDef": {
      "name": "visit_FunctionDef",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 244,
      "type": "method",
      "parent_class": "CodeElementVisitor",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:FunctionCallVisitor": {
      "name": "FunctionCallVisitor",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 282,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:FunctionCallVisitor.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 285,
      "type": "method",
      "parent_class": "FunctionCallVisitor",
      "has_tests": false
    },
    "pytestembed/pytestembed/dependency_graph.py:FunctionCallVisitor.visit_Call": {
      "name": "visit_Call",
      "file": "pytestembed/pytestembed/dependency_graph.py",
      "line": 288,
      "type": "method",
      "parent_class": "FunctionCallVisitor",
      "has_tests": false
    },
    "pytestembed/pytestembed/advanced_testing_cli.py:print_banner": {
      "name": "print_banner",
      "file": "pytestembed/pytestembed/advanced_testing_cli.py",
      "line": 22,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/advanced_testing_cli.py:smart_selection_command": {
      "name": "smart_selection_command",
      "file": "pytestembed/pytestembed/advanced_testing_cli.py",
      "line": 31,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/advanced_testing_cli.py:failure_prediction_command": {
      "name": "failure_prediction_command",
      "file": "pytestembed/pytestembed/advanced_testing_cli.py",
      "line": 62,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/advanced_testing_cli.py:property_testing_command": {
      "name": "property_testing_command",
      "file": "pytestembed/pytestembed/advanced_testing_cli.py",
      "line": 138,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/advanced_testing_cli.py:benchmark_command": {
      "name": "benchmark_command",
      "file": "pytestembed/pytestembed/advanced_testing_cli.py",
      "line": 210,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/advanced_testing_cli.py:main": {
      "name": "main",
      "file": "pytestembed/pytestembed/advanced_testing_cli.py",
      "line": 253,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:PythonToPyTestEmbedConverter": {
      "name": "PythonToPyTestEmbedConverter",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 17,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:PythonToPyTestEmbedConverter.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 20,
      "type": "method",
      "parent_class": "PythonToPyTestEmbedConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:PythonToPyTestEmbedConverter.convert_file": {
      "name": "convert_file",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 25,
      "type": "method",
      "parent_class": "PythonToPyTestEmbedConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:PythonToPyTestEmbedConverter.convert_content": {
      "name": "convert_content",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 38,
      "type": "method",
      "parent_class": "PythonToPyTestEmbedConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:PythonCodeAnalyzer": {
      "name": "PythonCodeAnalyzer",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 54,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:PythonCodeAnalyzer.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 57,
      "type": "method",
      "parent_class": "PythonCodeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:PythonCodeAnalyzer.analyze": {
      "name": "analyze",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 61,
      "type": "method",
      "parent_class": "PythonCodeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:ContentConverter": {
      "name": "ContentConverter",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 114,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:ContentConverter.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 117,
      "type": "method",
      "parent_class": "ContentConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:ContentConverter.convert": {
      "name": "convert",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 123,
      "type": "method",
      "parent_class": "ContentConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:ContentConverter._get_indentation": {
      "name": "_get_indentation",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 168,
      "type": "method",
      "parent_class": "ContentConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:ContentConverter._generate_test_block": {
      "name": "_generate_test_block",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 172,
      "type": "method",
      "parent_class": "ContentConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:ContentConverter._generate_doc_block": {
      "name": "_generate_doc_block",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 185,
      "type": "method",
      "parent_class": "ContentConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:ContentConverter._generate_placeholder_tests": {
      "name": "_generate_placeholder_tests",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 209,
      "type": "method",
      "parent_class": "ContentConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:ContentConverter._generate_ai_tests": {
      "name": "_generate_ai_tests",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 217,
      "type": "method",
      "parent_class": "ContentConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/converter.py:ContentConverter._generate_ai_documentation": {
      "name": "_generate_ai_documentation",
      "file": "pytestembed/pytestembed/converter.py",
      "line": 227,
      "type": "method",
      "parent_class": "ContentConverter",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:CodeChange": {
      "name": "CodeChange",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 23,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:TestImpact": {
      "name": "TestImpact",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 34,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:TestSelection": {
      "name": "TestSelection",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 47,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer": {
      "name": "DependencyAnalyzer",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 56,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 59,
      "type": "method",
      "parent_class": "DependencyAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer.build_dependency_graph": {
      "name": "build_dependency_graph",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 65,
      "type": "method",
      "parent_class": "DependencyAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer._should_skip_file": {
      "name": "_should_skip_file",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 108,
      "type": "method",
      "parent_class": "DependencyAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer._extract_imports": {
      "name": "_extract_imports",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 122,
      "type": "method",
      "parent_class": "DependencyAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer._extract_function_calls": {
      "name": "_extract_function_calls",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 137,
      "type": "method",
      "parent_class": "DependencyAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer._extract_function_definitions": {
      "name": "_extract_function_definitions",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 150,
      "type": "method",
      "parent_class": "DependencyAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer.find_impacted_files": {
      "name": "find_impacted_files",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 163,
      "type": "method",
      "parent_class": "DependencyAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:GitChangeAnalyzer": {
      "name": "GitChangeAnalyzer",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 188,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:GitChangeAnalyzer.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 191,
      "type": "method",
      "parent_class": "GitChangeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:GitChangeAnalyzer.get_changes_since_commit": {
      "name": "get_changes_since_commit",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 194,
      "type": "method",
      "parent_class": "GitChangeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:GitChangeAnalyzer._analyze_file_changes": {
      "name": "_analyze_file_changes",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 222,
      "type": "method",
      "parent_class": "GitChangeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:GitChangeAnalyzer._extract_function_from_line": {
      "name": "_extract_function_from_line",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 275,
      "type": "method",
      "parent_class": "GitChangeAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector": {
      "name": "SmartTestSelector",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 286,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 289,
      "type": "method",
      "parent_class": "SmartTestSelector",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.select_tests": {
      "name": "select_tests",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 297,
      "type": "method",
      "parent_class": "SmartTestSelector",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._find_all_tests": {
      "name": "_find_all_tests",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 349,
      "type": "method",
      "parent_class": "SmartTestSelector",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._calculate_test_impacts": {
      "name": "_calculate_test_impacts",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 389,
      "type": "method",
      "parent_class": "SmartTestSelector",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._select_tests_by_criteria": {
      "name": "_select_tests_by_criteria",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 424,
      "type": "method",
      "parent_class": "SmartTestSelector",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._calculate_confidence_score": {
      "name": "_calculate_confidence_score",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 465,
      "type": "method",
      "parent_class": "SmartTestSelector",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._generate_selection_reasons": {
      "name": "_generate_selection_reasons",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 486,
      "type": "method",
      "parent_class": "SmartTestSelector",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._load_test_history": {
      "name": "_load_test_history",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 506,
      "type": "method",
      "parent_class": "SmartTestSelector",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.update_test_history": {
      "name": "update_test_history",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 516,
      "type": "method",
      "parent_class": "SmartTestSelector",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._save_test_history": {
      "name": "_save_test_history",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 543,
      "type": "method",
      "parent_class": "SmartTestSelector",
      "has_tests": false
    },
    "pytestembed/pytestembed/smart_test_selection.py:run_smart_test_selection": {
      "name": "run_smart_test_selection",
      "file": "pytestembed/pytestembed/smart_test_selection.py",
      "line": 554,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_context.py:get_system_context": {
      "name": "get_system_context",
      "file": "pytestembed/pytestembed/ai_context.py",
      "line": 304,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_context.py:create_contextualized_prompt": {
      "name": "create_contextualized_prompt",
      "file": "pytestembed/pytestembed/ai_context.py",
      "line": 308,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_context.py:get_task_specific_context": {
      "name": "get_task_specific_context",
      "file": "pytestembed/pytestembed/ai_context.py",
      "line": 349,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:TestCase": {
      "name": "TestCase",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 20,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:TestBlock": {
      "name": "TestBlock",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 29,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:DocBlock": {
      "name": "DocBlock",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 38,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:MethodDef": {
      "name": "MethodDef",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 47,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:ClassDef": {
      "name": "ClassDef",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 58,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:FunctionDef": {
      "name": "FunctionDef",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 68,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:ParsedProgram": {
      "name": "ParsedProgram",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 79,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser": {
      "name": "PyTestEmbedParser",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 87,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 90,
      "type": "method",
      "parent_class": "PyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser.parse_file": {
      "name": "parse_file",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 104,
      "type": "method",
      "parent_class": "PyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_file_content": {
      "name": "_parse_file_content",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 132,
      "type": "method",
      "parent_class": "PyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser.parse_content": {
      "name": "parse_content",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 136,
      "type": "method",
      "parent_class": "PyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_program": {
      "name": "_parse_program",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 151,
      "type": "method",
      "parent_class": "PyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_class": {
      "name": "_parse_class",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 188,
      "type": "method",
      "parent_class": "PyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_method_with_blocks": {
      "name": "_parse_method_with_blocks",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 262,
      "type": "method",
      "parent_class": "PyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_method": {
      "name": "_parse_method",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 340,
      "type": "method",
      "parent_class": "PyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_function": {
      "name": "_parse_function",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 400,
      "type": "method",
      "parent_class": "PyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_test_block": {
      "name": "_parse_test_block",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 472,
      "type": "method",
      "parent_class": "PyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_doc_block": {
      "name": "_parse_doc_block",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 535,
      "type": "method",
      "parent_class": "PyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/parser.py:PyTestEmbedParser._get_indent_level": {
      "name": "_get_indent_level",
      "file": "pytestembed/pytestembed/parser.py",
      "line": 574,
      "type": "method",
      "parent_class": "PyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator": {
      "name": "TestGenerator",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 9,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 12,
      "type": "method",
      "parent_class": "TestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator.generate_tests": {
      "name": "generate_tests",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 15,
      "type": "method",
      "parent_class": "TestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator._generate_class_tests": {
      "name": "_generate_class_tests",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 54,
      "type": "method",
      "parent_class": "TestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator._generate_method_test_methods": {
      "name": "_generate_method_test_methods",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 86,
      "type": "method",
      "parent_class": "TestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator._generate_function_tests": {
      "name": "_generate_function_tests",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 108,
      "type": "method",
      "parent_class": "TestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator._generate_function_test_methods": {
      "name": "_generate_function_test_methods",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 128,
      "type": "method",
      "parent_class": "TestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator._generate_global_tests": {
      "name": "_generate_global_tests",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 150,
      "type": "method",
      "parent_class": "TestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator._generate_global_test_methods": {
      "name": "_generate_global_test_methods",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 179,
      "type": "method",
      "parent_class": "TestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator._generate_assertion": {
      "name": "_generate_assertion",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 202,
      "type": "method",
      "parent_class": "TestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator._replace_method_calls": {
      "name": "_replace_method_calls",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 337,
      "type": "method",
      "parent_class": "TestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator._generate_assertion_global": {
      "name": "_generate_assertion_global",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 358,
      "type": "method",
      "parent_class": "TestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/generator.py:TestGenerator._replace_method_calls_global": {
      "name": "_replace_method_calls_global",
      "file": "pytestembed/pytestembed/generator.py",
      "line": 378,
      "type": "method",
      "parent_class": "TestGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:cli": {
      "name": "cli",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 22,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:run": {
      "name": "run",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 36,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:run_tests": {
      "name": "run_tests",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 87,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:convert_file": {
      "name": "convert_file",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 190,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:generate_documentation": {
      "name": "generate_documentation",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 242,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:remove_test_doc_blocks": {
      "name": "remove_test_doc_blocks",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 263,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:init": {
      "name": "init",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 314,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:live": {
      "name": "live",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 334,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:config": {
      "name": "config",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 350,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:lint": {
      "name": "lint",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 367,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:format": {
      "name": "format",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 425,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:migrate": {
      "name": "migrate",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 474,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:generate": {
      "name": "generate",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 539,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:insert_blocks_into_file": {
      "name": "insert_blocks_into_file",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 573,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/cli.py:main": {
      "name": "main",
      "file": "pytestembed/pytestembed/cli.py",
      "line": 630,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/utils.py:get_file_hash": {
      "name": "get_file_hash",
      "file": "pytestembed/pytestembed/utils.py",
      "line": 9,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/utils.py:get_cache_dir": {
      "name": "get_cache_dir",
      "file": "pytestembed/pytestembed/utils.py",
      "line": 15,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/utils.py:is_file_cached": {
      "name": "is_file_cached",
      "file": "pytestembed/pytestembed/utils.py",
      "line": 22,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/utils.py:cache_file_hash": {
      "name": "cache_file_hash",
      "file": "pytestembed/pytestembed/utils.py",
      "line": 37,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:PyTestEmbedError": {
      "name": "PyTestEmbedError",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 20,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ParseError": {
      "name": "ParseError",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 25,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:AIError": {
      "name": "AIError",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 30,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:CacheError": {
      "name": "CacheError",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 35,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ConfigError": {
      "name": "ConfigError",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 40,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:NetworkError": {
      "name": "NetworkError",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 45,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler": {
      "name": "ErrorHandler",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 50,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 53,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler._setup_logging": {
      "name": "_setup_logging",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 65,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler._setup_recovery_strategies": {
      "name": "_setup_recovery_strategies",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 100,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler.handle_error": {
      "name": "handle_error",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 112,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler._detect_recovery_strategy": {
      "name": "_detect_recovery_strategy",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 144,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler._recover_ai_unavailable": {
      "name": "_recover_ai_unavailable",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 175,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler._recover_network_timeout": {
      "name": "_recover_network_timeout",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 187,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler._recover_parse_error": {
      "name": "_recover_parse_error",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 200,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler._recover_cache_corrupted": {
      "name": "_recover_cache_corrupted",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 211,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler._recover_config_invalid": {
      "name": "_recover_config_invalid",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 224,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler._recover_file_not_found": {
      "name": "_recover_file_not_found",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 235,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler._recover_permission_denied": {
      "name": "_recover_permission_denied",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 246,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler.with_error_handling": {
      "name": "with_error_handling",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 257,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler.safe_execute": {
      "name": "safe_execute",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 280,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler.get_error_stats": {
      "name": "get_error_stats",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 297,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:ErrorHandler.clear_error_stats": {
      "name": "clear_error_stats",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 306,
      "type": "method",
      "parent_class": "ErrorHandler",
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:with_error_recovery": {
      "name": "with_error_recovery",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 312,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:safe_import": {
      "name": "safe_import",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 329,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:safe_file_operation": {
      "name": "safe_file_operation",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 340,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:validate_and_recover_json": {
      "name": "validate_and_recover_json",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 358,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/error_handler.py:get_error_handler": {
      "name": "get_error_handler",
      "file": "pytestembed/pytestembed/error_handler.py",
      "line": 392,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/doc_generator.py:DocGenerator": {
      "name": "DocGenerator",
      "file": "pytestembed/pytestembed/doc_generator.py",
      "line": 8,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/doc_generator.py:DocGenerator.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/doc_generator.py",
      "line": 11,
      "type": "method",
      "parent_class": "DocGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/doc_generator.py:DocGenerator.generate_docs": {
      "name": "generate_docs",
      "file": "pytestembed/pytestembed/doc_generator.py",
      "line": 19,
      "type": "method",
      "parent_class": "DocGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/doc_generator.py:DocGenerator._generate_class_docs": {
      "name": "_generate_class_docs",
      "file": "pytestembed/pytestembed/doc_generator.py",
      "line": 50,
      "type": "method",
      "parent_class": "DocGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/doc_generator.py:DocGenerator._generate_method_docs": {
      "name": "_generate_method_docs",
      "file": "pytestembed/pytestembed/doc_generator.py",
      "line": 74,
      "type": "method",
      "parent_class": "DocGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/doc_generator.py:DocGenerator._generate_function_docs": {
      "name": "_generate_function_docs",
      "file": "pytestembed/pytestembed/doc_generator.py",
      "line": 100,
      "type": "method",
      "parent_class": "DocGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/doc_generator.py:DocGenerator._extract_doc_content": {
      "name": "_extract_doc_content",
      "file": "pytestembed/pytestembed/doc_generator.py",
      "line": 125,
      "type": "method",
      "parent_class": "DocGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/doc_generator.py:DocGenerator._enhance_text": {
      "name": "_enhance_text",
      "file": "pytestembed/pytestembed/doc_generator.py",
      "line": 143,
      "type": "method",
      "parent_class": "DocGenerator",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer": {
      "name": "AIDocumentationEnhancer",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 14,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 17,
      "type": "method",
      "parent_class": "AIDocumentationEnhancer",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer.enhance_documentation": {
      "name": "enhance_documentation",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 21,
      "type": "method",
      "parent_class": "AIDocumentationEnhancer",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer._create_documentation_prompt": {
      "name": "_create_documentation_prompt",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 46,
      "type": "method",
      "parent_class": "AIDocumentationEnhancer",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer._extract_source_context": {
      "name": "_extract_source_context",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 94,
      "type": "method",
      "parent_class": "AIDocumentationEnhancer",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer._parse_ai_documentation": {
      "name": "_parse_ai_documentation",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 119,
      "type": "method",
      "parent_class": "AIDocumentationEnhancer",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer._split_into_sentences": {
      "name": "_split_into_sentences",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 162,
      "type": "method",
      "parent_class": "AIDocumentationEnhancer",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer._generate_fallback_documentation": {
      "name": "_generate_fallback_documentation",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 168,
      "type": "method",
      "parent_class": "AIDocumentationEnhancer",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer": {
      "name": "SmartDocumentationEnhancer",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 193,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 196,
      "type": "method",
      "parent_class": "SmartDocumentationEnhancer",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer.generate_comprehensive_documentation": {
      "name": "generate_comprehensive_documentation",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 199,
      "type": "method",
      "parent_class": "SmartDocumentationEnhancer",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer._analyze_code_structure": {
      "name": "_analyze_code_structure",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 208,
      "type": "method",
      "parent_class": "SmartDocumentationEnhancer",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer._generate_enhanced_documentation": {
      "name": "_generate_enhanced_documentation",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 257,
      "type": "method",
      "parent_class": "SmartDocumentationEnhancer",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer._create_enhanced_documentation_prompt": {
      "name": "_create_enhanced_documentation_prompt",
      "file": "pytestembed/pytestembed/ai_doc_enhancer.py",
      "line": 277,
      "type": "method",
      "parent_class": "SmartDocumentationEnhancer",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:IncrementalParser": {
      "name": "IncrementalParser",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 23,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:IncrementalParser.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 26,
      "type": "method",
      "parent_class": "IncrementalParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:IncrementalParser.needs_reparsing": {
      "name": "needs_reparsing",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 31,
      "type": "method",
      "parent_class": "IncrementalParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:IncrementalParser.get_modified_functions": {
      "name": "get_modified_functions",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 45,
      "type": "method",
      "parent_class": "IncrementalParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:IncrementalParser.parse_incrementally": {
      "name": "parse_incrementally",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 67,
      "type": "method",
      "parent_class": "IncrementalParser",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:ParallelExecutor": {
      "name": "ParallelExecutor",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 102,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:ParallelExecutor.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 105,
      "type": "method",
      "parent_class": "ParallelExecutor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:ParallelExecutor.execute_tests_parallel": {
      "name": "execute_tests_parallel",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 110,
      "type": "method",
      "parent_class": "ParallelExecutor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:ParallelExecutor.generate_ai_content_parallel": {
      "name": "generate_ai_content_parallel",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 136,
      "type": "method",
      "parent_class": "ParallelExecutor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:ParallelExecutor.process_files_parallel": {
      "name": "process_files_parallel",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 172,
      "type": "method",
      "parent_class": "ParallelExecutor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer": {
      "name": "MemoryOptimizer",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 199,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 202,
      "type": "method",
      "parent_class": "MemoryOptimizer",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.get_memory_usage_mb": {
      "name": "get_memory_usage_mb",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 208,
      "type": "method",
      "parent_class": "MemoryOptimizer",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.should_cleanup": {
      "name": "should_cleanup",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 218,
      "type": "method",
      "parent_class": "MemoryOptimizer",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.cleanup_memory": {
      "name": "cleanup_memory",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 228,
      "type": "method",
      "parent_class": "MemoryOptimizer",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.register_object": {
      "name": "register_object",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 244,
      "type": "method",
      "parent_class": "MemoryOptimizer",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.get_object": {
      "name": "get_object",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 251,
      "type": "method",
      "parent_class": "MemoryOptimizer",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.optimize_large_file_processing": {
      "name": "optimize_large_file_processing",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 258,
      "type": "method",
      "parent_class": "MemoryOptimizer",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor": {
      "name": "BackgroundProcessor",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 268,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 271,
      "type": "method",
      "parent_class": "BackgroundProcessor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.start": {
      "name": "start",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 278,
      "type": "method",
      "parent_class": "BackgroundProcessor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.stop": {
      "name": "stop",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 287,
      "type": "method",
      "parent_class": "BackgroundProcessor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor._worker_loop": {
      "name": "_worker_loop",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 293,
      "type": "method",
      "parent_class": "BackgroundProcessor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.submit_task": {
      "name": "submit_task",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 324,
      "type": "method",
      "parent_class": "BackgroundProcessor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.get_result": {
      "name": "get_result",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 331,
      "type": "method",
      "parent_class": "BackgroundProcessor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.is_task_complete": {
      "name": "is_task_complete",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 335,
      "type": "method",
      "parent_class": "BackgroundProcessor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.wait_for_task": {
      "name": "wait_for_task",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 339,
      "type": "method",
      "parent_class": "BackgroundProcessor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:PerformanceMonitor": {
      "name": "PerformanceMonitor",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 351,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:PerformanceMonitor.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 354,
      "type": "method",
      "parent_class": "PerformanceMonitor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:PerformanceMonitor.start_timer": {
      "name": "start_timer",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 358,
      "type": "method",
      "parent_class": "PerformanceMonitor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:PerformanceMonitor.end_timer": {
      "name": "end_timer",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 362,
      "type": "method",
      "parent_class": "PerformanceMonitor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:PerformanceMonitor.get_average_time": {
      "name": "get_average_time",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 377,
      "type": "method",
      "parent_class": "PerformanceMonitor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:PerformanceMonitor.get_performance_report": {
      "name": "get_performance_report",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 382,
      "type": "method",
      "parent_class": "PerformanceMonitor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:PerformanceMonitor.clear_metrics": {
      "name": "clear_metrics",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 398,
      "type": "method",
      "parent_class": "PerformanceMonitor",
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:get_incremental_parser": {
      "name": "get_incremental_parser",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 411,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:get_parallel_executor": {
      "name": "get_parallel_executor",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 418,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:get_memory_optimizer": {
      "name": "get_memory_optimizer",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 425,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:get_background_processor": {
      "name": "get_background_processor",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 432,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/performance_optimizer.py:get_performance_monitor": {
      "name": "get_performance_monitor",
      "file": "pytestembed/pytestembed/performance_optimizer.py",
      "line": 439,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer": {
      "name": "ProjectInitializer",
      "file": "pytestembed/pytestembed/init.py",
      "line": 22,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/init.py",
      "line": 25,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer.init_project": {
      "name": "init_project",
      "file": "pytestembed/pytestembed/init.py",
      "line": 30,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._create_project_structure": {
      "name": "_create_project_structure",
      "file": "pytestembed/pytestembed/init.py",
      "line": 79,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._create_config_files": {
      "name": "_create_config_files",
      "file": "pytestembed/pytestembed/init.py",
      "line": 100,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._create_pixi_config": {
      "name": "_create_pixi_config",
      "file": "pytestembed/pytestembed/init.py",
      "line": 128,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._create_env_file": {
      "name": "_create_env_file",
      "file": "pytestembed/pytestembed/init.py",
      "line": 177,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._create_example_files": {
      "name": "_create_example_files",
      "file": "pytestembed/pytestembed/init.py",
      "line": 201,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._create_basic_examples": {
      "name": "_create_basic_examples",
      "file": "pytestembed/pytestembed/init.py",
      "line": 216,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._setup_ide_config": {
      "name": "_setup_ide_config",
      "file": "pytestembed/pytestembed/init.py",
      "line": 364,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._setup_vscode": {
      "name": "_setup_vscode",
      "file": "pytestembed/pytestembed/init.py",
      "line": 376,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._setup_git": {
      "name": "_setup_git",
      "file": "pytestembed/pytestembed/init.py",
      "line": 451,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._setup_ci_cd": {
      "name": "_setup_ci_cd",
      "file": "pytestembed/pytestembed/init.py",
      "line": 518,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._create_documentation": {
      "name": "_create_documentation",
      "file": "pytestembed/pytestembed/init.py",
      "line": 571,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._setup_dependencies": {
      "name": "_setup_dependencies",
      "file": "pytestembed/pytestembed/init.py",
      "line": 657,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._finalize_setup": {
      "name": "_finalize_setup",
      "file": "pytestembed/pytestembed/init.py",
      "line": 672,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:ProjectInitializer._print_next_steps": {
      "name": "_print_next_steps",
      "file": "pytestembed/pytestembed/init.py",
      "line": 756,
      "type": "method",
      "parent_class": "ProjectInitializer",
      "has_tests": false
    },
    "pytestembed/pytestembed/init.py:init_command": {
      "name": "init_command",
      "file": "pytestembed/pytestembed/init.py",
      "line": 785,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:LintIssue": {
      "name": "LintIssue",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 19,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter": {
      "name": "PyTestEmbedLinter",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 29,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 32,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.lint_file": {
      "name": "lint_file",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 53,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.lint_content": {
      "name": "lint_content",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 70,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_python_syntax": {
      "name": "_check_python_syntax",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 101,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_pytestembed_syntax": {
      "name": "_check_pytestembed_syntax",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 112,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_test_line": {
      "name": "_check_test_line",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 157,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_doc_line": {
      "name": "_check_doc_line",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 198,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_function": {
      "name": "_check_function",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 216,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_test_block_quality": {
      "name": "_check_test_block_quality",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 247,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_doc_block_quality": {
      "name": "_check_doc_block_quality",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 275,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.get_issue_summary": {
      "name": "get_issue_summary",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 297,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.format_issues": {
      "name": "format_issues",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 304,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.configure_rules": {
      "name": "configure_rules",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 332,
      "type": "method",
      "parent_class": "PyTestEmbedLinter",
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:lint_file": {
      "name": "lint_file",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 337,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/linter.py:lint_directory": {
      "name": "lint_directory",
      "file": "pytestembed/pytestembed/linter.py",
      "line": 345,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:TestFeatures": {
      "name": "TestFeatures",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 23,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:FailurePrediction": {
      "name": "FailurePrediction",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 58,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:CodeComplexityAnalyzer": {
      "name": "CodeComplexityAnalyzer",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 68,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:CodeComplexityAnalyzer.calculate_cyclomatic_complexity": {
      "name": "calculate_cyclomatic_complexity",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 72,
      "type": "method",
      "parent_class": "CodeComplexityAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:CodeComplexityAnalyzer.calculate_cognitive_complexity": {
      "name": "calculate_cognitive_complexity",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 94,
      "type": "method",
      "parent_class": "CodeComplexityAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:CodeComplexityAnalyzer.analyze_dependencies": {
      "name": "analyze_dependencies",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 127,
      "type": "method",
      "parent_class": "CodeComplexityAnalyzer",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor": {
      "name": "TestFeatureExtractor",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 169,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 172,
      "type": "method",
      "parent_class": "TestFeatureExtractor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor.extract_features": {
      "name": "extract_features",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 177,
      "type": "method",
      "parent_class": "TestFeatureExtractor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor._extract_function_code": {
      "name": "_extract_function_code",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 240,
      "type": "method",
      "parent_class": "TestFeatureExtractor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor._extract_test_characteristics": {
      "name": "_extract_test_characteristics",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 251,
      "type": "method",
      "parent_class": "TestFeatureExtractor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor._extract_code_characteristics": {
      "name": "_extract_code_characteristics",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 283,
      "type": "method",
      "parent_class": "TestFeatureExtractor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor._extract_historical_characteristics": {
      "name": "_extract_historical_characteristics",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 320,
      "type": "method",
      "parent_class": "TestFeatureExtractor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor._extract_change_characteristics": {
      "name": "_extract_change_characteristics",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 343,
      "type": "method",
      "parent_class": "TestFeatureExtractor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor._extract_environmental_characteristics": {
      "name": "_extract_environmental_characteristics",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 371,
      "type": "method",
      "parent_class": "TestFeatureExtractor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:HeuristicPredictor": {
      "name": "HeuristicPredictor",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 393,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:HeuristicPredictor.predict_failure": {
      "name": "predict_failure",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 396,
      "type": "method",
      "parent_class": "HeuristicPredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor": {
      "name": "SimpleMLPredictor",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 471,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 474,
      "type": "method",
      "parent_class": "SimpleMLPredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor._initialize_weights": {
      "name": "_initialize_weights",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 478,
      "type": "method",
      "parent_class": "SimpleMLPredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor.predict_failure": {
      "name": "predict_failure",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 495,
      "type": "method",
      "parent_class": "SimpleMLPredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor.update_weights": {
      "name": "update_weights",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 529,
      "type": "method",
      "parent_class": "SimpleMLPredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor._features_to_values": {
      "name": "_features_to_values",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 543,
      "type": "method",
      "parent_class": "SimpleMLPredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:FailurePredictor": {
      "name": "FailurePredictor",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 561,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:FailurePredictor.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 564,
      "type": "method",
      "parent_class": "FailurePredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:FailurePredictor.predict_test_failure": {
      "name": "predict_test_failure",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 572,
      "type": "method",
      "parent_class": "FailurePredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:FailurePredictor.update_with_results": {
      "name": "update_with_results",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 614,
      "type": "method",
      "parent_class": "FailurePredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:FailurePredictor._generate_recommendation": {
      "name": "_generate_recommendation",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 643,
      "type": "method",
      "parent_class": "FailurePredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:FailurePredictor.get_prediction_accuracy": {
      "name": "get_prediction_accuracy",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 655,
      "type": "method",
      "parent_class": "FailurePredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:FailurePredictor._load_prediction_history": {
      "name": "_load_prediction_history",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 685,
      "type": "method",
      "parent_class": "FailurePredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:FailurePredictor._save_prediction_history": {
      "name": "_save_prediction_history",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 695,
      "type": "method",
      "parent_class": "FailurePredictor",
      "has_tests": false
    },
    "pytestembed/pytestembed/failure_prediction.py:predict_test_failures": {
      "name": "predict_test_failures",
      "file": "pytestembed/pytestembed/failure_prediction.py",
      "line": 706,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI": {
      "name": "ConfigGUI",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 15,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 18,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.setup_variables": {
      "name": "setup_variables",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 33,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_widgets": {
      "name": "create_widgets",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 66,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_ai_tab": {
      "name": "create_ai_tab",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 81,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_general_tab": {
      "name": "create_general_tab",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 157,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_prompts_tab": {
      "name": "create_prompts_tab",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 236,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_advanced_tab": {
      "name": "create_advanced_tab",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 273,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_bottom_buttons": {
      "name": "create_bottom_buttons",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 297,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.load_current_config": {
      "name": "load_current_config",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 306,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.load_current_prompt": {
      "name": "load_current_prompt",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 348,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.on_provider_changed": {
      "name": "on_provider_changed",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 356,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.on_prompt_type_changed": {
      "name": "on_prompt_type_changed",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 361,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.save_current_prompt": {
      "name": "save_current_prompt",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 366,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.reset_current_prompt": {
      "name": "reset_current_prompt",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 372,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.refresh_models": {
      "name": "refresh_models",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 392,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.test_connection": {
      "name": "test_connection",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 410,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.browse_python_interpreter": {
      "name": "browse_python_interpreter",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 425,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.apply_config": {
      "name": "apply_config",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 436,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.save_config": {
      "name": "save_config",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 476,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.export_config": {
      "name": "export_config",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 487,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.import_config": {
      "name": "import_config",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 502,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.reset_to_defaults": {
      "name": "reset_to_defaults",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 517,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.add_status": {
      "name": "add_status",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 524,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:ConfigGUI.run": {
      "name": "run",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 531,
      "type": "method",
      "parent_class": "ConfigGUI",
      "has_tests": false
    },
    "pytestembed/pytestembed/config_gui.py:launch_config_gui": {
      "name": "launch_config_gui",
      "file": "pytestembed/pytestembed/config_gui.py",
      "line": 536,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/mcp_server.py:PyTestEmbedMCPServer": {
      "name": "PyTestEmbedMCPServer",
      "file": "pytestembed/pytestembed/mcp_server.py",
      "line": 25,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/mcp_server.py:PyTestEmbedMCPServer.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/mcp_server.py",
      "line": 28,
      "type": "method",
      "parent_class": "PyTestEmbedMCPServer",
      "has_tests": false
    },
    "pytestembed/pytestembed/mcp_server.py:PyTestEmbedMCPServer._initialize": {
      "name": "_initialize",
      "file": "pytestembed/pytestembed/mcp_server.py",
      "line": 137,
      "type": "method",
      "parent_class": "PyTestEmbedMCPServer",
      "has_tests": false
    },
    "pytestembed/pytestembed/mcp_server.py:PyTestEmbedMCPServer._list_tools": {
      "name": "_list_tools",
      "file": "pytestembed/pytestembed/mcp_server.py",
      "line": 155,
      "type": "method",
      "parent_class": "PyTestEmbedMCPServer",
      "has_tests": false
    },
    "pytestembed/pytestembed/mcp_server.py:PyTestEmbedMCPServer._list_resources": {
      "name": "_list_resources",
      "file": "pytestembed/pytestembed/mcp_server.py",
      "line": 264,
      "type": "method",
      "parent_class": "PyTestEmbedMCPServer",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIProvider": {
      "name": "AIProvider",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 18,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIProvider.generate_completion": {
      "name": "generate_completion",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 22,
      "type": "method",
      "parent_class": "AIProvider",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIProvider.is_available": {
      "name": "is_available",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 27,
      "type": "method",
      "parent_class": "AIProvider",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:OllamaProvider": {
      "name": "OllamaProvider",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 32,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:OllamaProvider.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 35,
      "type": "method",
      "parent_class": "OllamaProvider",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:OllamaProvider.generate_completion": {
      "name": "generate_completion",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 41,
      "type": "method",
      "parent_class": "OllamaProvider",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:OllamaProvider.is_available": {
      "name": "is_available",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 72,
      "type": "method",
      "parent_class": "OllamaProvider",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:OllamaProvider.list_models": {
      "name": "list_models",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 80,
      "type": "method",
      "parent_class": "OllamaProvider",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:LMStudioProvider": {
      "name": "LMStudioProvider",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 92,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:LMStudioProvider.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 95,
      "type": "method",
      "parent_class": "LMStudioProvider",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:LMStudioProvider.generate_completion": {
      "name": "generate_completion",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 100,
      "type": "method",
      "parent_class": "LMStudioProvider",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:LMStudioProvider.is_available": {
      "name": "is_available",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 131,
      "type": "method",
      "parent_class": "LMStudioProvider",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:LMStudioProvider.list_models": {
      "name": "list_models",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 139,
      "type": "method",
      "parent_class": "LMStudioProvider",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIProviderError": {
      "name": "AIProviderError",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 151,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIManager": {
      "name": "AIManager",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 156,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIManager.__init__": {
      "name": "__init__",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 159,
      "type": "method",
      "parent_class": "AIManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIManager._load_configuration": {
      "name": "_load_configuration",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 165,
      "type": "method",
      "parent_class": "AIManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIManager.get_provider": {
      "name": "get_provider",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 187,
      "type": "method",
      "parent_class": "AIManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIManager.set_active_provider": {
      "name": "set_active_provider",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 197,
      "type": "method",
      "parent_class": "AIManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIManager.list_available_providers": {
      "name": "list_available_providers",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 204,
      "type": "method",
      "parent_class": "AIManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIManager.is_ai_available": {
      "name": "is_ai_available",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 208,
      "type": "method",
      "parent_class": "AIManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIManager.generate_completion": {
      "name": "generate_completion",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 212,
      "type": "method",
      "parent_class": "AIManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:AIManager.generate_contextualized_completion": {
      "name": "generate_contextualized_completion",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 220,
      "type": "method",
      "parent_class": "AIManager",
      "has_tests": false
    },
    "pytestembed/pytestembed/ai_integration.py:get_ai_manager": {
      "name": "get_ai_manager",
      "file": "pytestembed/pytestembed/ai_integration.py",
      "line": 234,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestPyTestEmbedParser": {
      "name": "TestPyTestEmbedParser",
      "file": "pytestembed/tests/test_parser.py",
      "line": 10,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestPyTestEmbedParser.setUp": {
      "name": "setUp",
      "file": "pytestembed/tests/test_parser.py",
      "line": 13,
      "type": "method",
      "parent_class": "TestPyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestPyTestEmbedParser.test_parse_derp_example": {
      "name": "test_parse_derp_example",
      "file": "pytestembed/tests/test_parser.py",
      "line": 19,
      "type": "method",
      "parent_class": "TestPyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestPyTestEmbedParser.test_parse_simple_class": {
      "name": "test_parse_simple_class",
      "file": "pytestembed/tests/test_parser.py",
      "line": 77,
      "type": "method",
      "parent_class": "TestPyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestPyTestEmbedParser.test_parse_function_with_tests": {
      "name": "test_parse_function_with_tests",
      "file": "pytestembed/tests/test_parser.py",
      "line": 114,
      "type": "method",
      "parent_class": "TestPyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestPyTestEmbedParser.test_parse_global_test_block": {
      "name": "test_parse_global_test_block",
      "file": "pytestembed/tests/test_parser.py",
      "line": 144,
      "type": "method",
      "parent_class": "TestPyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestPyTestEmbedParser.test_parse_multiline_test_case": {
      "name": "test_parse_multiline_test_case",
      "file": "pytestembed/tests/test_parser.py",
      "line": 166,
      "type": "method",
      "parent_class": "TestPyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestPyTestEmbedParser.test_parse_error_handling": {
      "name": "test_parse_error_handling",
      "file": "pytestembed/tests/test_parser.py",
      "line": 192,
      "type": "method",
      "parent_class": "TestPyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestPyTestEmbedParser.test_parse_unicode_content": {
      "name": "test_parse_unicode_content",
      "file": "pytestembed/tests/test_parser.py",
      "line": 209,
      "type": "method",
      "parent_class": "TestPyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestPyTestEmbedParser.test_parse_nested_functions": {
      "name": "test_parse_nested_functions",
      "file": "pytestembed/tests/test_parser.py",
      "line": 229,
      "type": "method",
      "parent_class": "TestPyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestPyTestEmbedParser.test_parse_empty_content": {
      "name": "test_parse_empty_content",
      "file": "pytestembed/tests/test_parser.py",
      "line": 255,
      "type": "method",
      "parent_class": "TestPyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestPyTestEmbedParser.test_parse_comments_and_strings": {
      "name": "test_parse_comments_and_strings",
      "file": "pytestembed/tests/test_parser.py",
      "line": 264,
      "type": "method",
      "parent_class": "TestPyTestEmbedParser",
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestParserPerformance": {
      "name": "TestParserPerformance",
      "file": "pytestembed/tests/test_parser.py",
      "line": 288,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestParserPerformance.setUp": {
      "name": "setUp",
      "file": "pytestembed/tests/test_parser.py",
      "line": 291,
      "type": "method",
      "parent_class": "TestParserPerformance",
      "has_tests": false
    },
    "pytestembed/tests/test_parser.py:TestParserPerformance.test_parse_large_file": {
      "name": "test_parse_large_file",
      "file": "pytestembed/tests/test_parser.py",
      "line": 295,
      "type": "method",
      "parent_class": "TestParserPerformance",
      "has_tests": false
    },
    "pytestembed/tests/test_generator.py:TestTestGenerator": {
      "name": "TestTestGenerator",
      "file": "pytestembed/tests/test_generator.py",
      "line": 8,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_generator.py:TestTestGenerator.setUp": {
      "name": "setUp",
      "file": "pytestembed/tests/test_generator.py",
      "line": 11,
      "type": "method",
      "parent_class": "TestTestGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_generator.py:TestTestGenerator.test_generate_simple_class_tests": {
      "name": "test_generate_simple_class_tests",
      "file": "pytestembed/tests/test_generator.py",
      "line": 16,
      "type": "method",
      "parent_class": "TestTestGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_generator.py:TestTestGenerator.test_generate_function_tests": {
      "name": "test_generate_function_tests",
      "file": "pytestembed/tests/test_generator.py",
      "line": 43,
      "type": "method",
      "parent_class": "TestTestGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_generator.py:TestTestGenerator.test_generate_global_tests": {
      "name": "test_generate_global_tests",
      "file": "pytestembed/tests/test_generator.py",
      "line": 62,
      "type": "method",
      "parent_class": "TestTestGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_generator.py:TestTestGenerator.test_generate_multiline_test_case": {
      "name": "test_generate_multiline_test_case",
      "file": "pytestembed/tests/test_generator.py",
      "line": 79,
      "type": "method",
      "parent_class": "TestTestGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_generator.py:TestTestGenerator.test_generate_derp_example": {
      "name": "test_generate_derp_example",
      "file": "pytestembed/tests/test_generator.py",
      "line": 97,
      "type": "method",
      "parent_class": "TestTestGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIProviders": {
      "name": "TestAIProviders",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 19,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIProviders.test_ollama_provider_initialization": {
      "name": "test_ollama_provider_initialization",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 22,
      "type": "method",
      "parent_class": "TestAIProviders",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIProviders.test_lmstudio_provider_initialization": {
      "name": "test_lmstudio_provider_initialization",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 30,
      "type": "method",
      "parent_class": "TestAIProviders",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIProviders.test_ollama_generate_completion": {
      "name": "test_ollama_generate_completion",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 39,
      "type": "method",
      "parent_class": "TestAIProviders",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIProviders.test_lmstudio_generate_completion": {
      "name": "test_lmstudio_generate_completion",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 57,
      "type": "method",
      "parent_class": "TestAIProviders",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIProviders.test_ollama_availability_check": {
      "name": "test_ollama_availability_check",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 76,
      "type": "method",
      "parent_class": "TestAIProviders",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIProviders.test_lmstudio_availability_check": {
      "name": "test_lmstudio_availability_check",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 91,
      "type": "method",
      "parent_class": "TestAIProviders",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIManager": {
      "name": "TestAIManager",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 106,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIManager.setUp": {
      "name": "setUp",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 109,
      "type": "method",
      "parent_class": "TestAIManager",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIManager.test_ai_manager_initialization": {
      "name": "test_ai_manager_initialization",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 130,
      "type": "method",
      "parent_class": "TestAIManager",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIManager.test_get_provider": {
      "name": "test_get_provider",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 136,
      "type": "method",
      "parent_class": "TestAIManager",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIManager.test_set_active_provider": {
      "name": "test_set_active_provider",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 153,
      "type": "method",
      "parent_class": "TestAIManager",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIManager.test_list_available_providers": {
      "name": "test_list_available_providers",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 162,
      "type": "method",
      "parent_class": "TestAIManager",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIManager.test_is_ai_available": {
      "name": "test_is_ai_available",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 169,
      "type": "method",
      "parent_class": "TestAIManager",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIManager.test_generate_completion": {
      "name": "test_generate_completion",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 177,
      "type": "method",
      "parent_class": "TestAIManager",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIManager.test_generate_contextualized_completion": {
      "name": "test_generate_contextualized_completion",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 193,
      "type": "method",
      "parent_class": "TestAIManager",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIContext": {
      "name": "TestAIContext",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 210,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIContext.test_create_contextualized_prompt": {
      "name": "test_create_contextualized_prompt",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 213,
      "type": "method",
      "parent_class": "TestAIContext",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIContext.test_context_contains_examples": {
      "name": "test_context_contains_examples",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 240,
      "type": "method",
      "parent_class": "TestAIContext",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIContext.test_context_size": {
      "name": "test_context_size",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 254,
      "type": "method",
      "parent_class": "TestAIContext",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIIntegrationEdgeCases": {
      "name": "TestAIIntegrationEdgeCases",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 266,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIIntegrationEdgeCases.test_network_timeout_handling": {
      "name": "test_network_timeout_handling",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 269,
      "type": "method",
      "parent_class": "TestAIIntegrationEdgeCases",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIIntegrationEdgeCases.test_invalid_json_response": {
      "name": "test_invalid_json_response",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 281,
      "type": "method",
      "parent_class": "TestAIIntegrationEdgeCases",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIIntegrationEdgeCases.test_http_error_responses": {
      "name": "test_http_error_responses",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 294,
      "type": "method",
      "parent_class": "TestAIIntegrationEdgeCases",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestAIIntegrationEdgeCases.test_empty_response_handling": {
      "name": "test_empty_response_handling",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 307,
      "type": "method",
      "parent_class": "TestAIIntegrationEdgeCases",
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestGlobalAIManager": {
      "name": "TestGlobalAIManager",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 321,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_ai_integration.py:TestGlobalAIManager.test_get_ai_manager_singleton": {
      "name": "test_get_ai_manager_singleton",
      "file": "pytestembed/tests/test_ai_integration.py",
      "line": 324,
      "type": "method",
      "parent_class": "TestGlobalAIManager",
      "has_tests": false
    },
    "pytestembed/tests/test_runner.py:TestTestRunner": {
      "name": "TestTestRunner",
      "file": "pytestembed/tests/test_runner.py",
      "line": 12,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_runner.py:TestTestRunner.setUp": {
      "name": "setUp",
      "file": "pytestembed/tests/test_runner.py",
      "line": 15,
      "type": "method",
      "parent_class": "TestTestRunner",
      "has_tests": false
    },
    "pytestembed/tests/test_runner.py:TestTestRunner.test_run_simple_passing_tests": {
      "name": "test_run_simple_passing_tests",
      "file": "pytestembed/tests/test_runner.py",
      "line": 20,
      "type": "method",
      "parent_class": "TestTestRunner",
      "has_tests": false
    },
    "pytestembed/tests/test_runner.py:TestTestRunner.test_run_failing_tests": {
      "name": "test_run_failing_tests",
      "file": "pytestembed/tests/test_runner.py",
      "line": 42,
      "type": "method",
      "parent_class": "TestTestRunner",
      "has_tests": false
    },
    "pytestembed/tests/test_runner.py:TestTestRunner.test_run_tests_with_parsed_program": {
      "name": "test_run_tests_with_parsed_program",
      "file": "pytestembed/tests/test_runner.py",
      "line": 63,
      "type": "method",
      "parent_class": "TestTestRunner",
      "has_tests": false
    },
    "pytestembed/tests/test_runner.py:TestTestRunner.test_no_tests_to_run": {
      "name": "test_no_tests_to_run",
      "file": "pytestembed/tests/test_runner.py",
      "line": 84,
      "type": "method",
      "parent_class": "TestTestRunner",
      "has_tests": false
    },
    "pytestembed/tests/test_runner.py:TestTestRunner.test_remove_test_doc_blocks": {
      "name": "test_remove_test_doc_blocks",
      "file": "pytestembed/tests/test_runner.py",
      "line": 95,
      "type": "method",
      "parent_class": "TestTestRunner",
      "has_tests": false
    },
    "pytestembed/tests/test_runner.py:TestTestRunner.test_file_not_found": {
      "name": "test_file_not_found",
      "file": "pytestembed/tests/test_runner.py",
      "line": 124,
      "type": "method",
      "parent_class": "TestTestRunner",
      "has_tests": false
    },
    "pytestembed/tests/test_runner.py:TestTestRunner.test_multiline_test_cases": {
      "name": "test_multiline_test_cases",
      "file": "pytestembed/tests/test_runner.py",
      "line": 129,
      "type": "method",
      "parent_class": "TestTestRunner",
      "has_tests": false
    },
    "pytestembed/tests/test_integration.py:TestIntegration": {
      "name": "TestIntegration",
      "file": "pytestembed/tests/test_integration.py",
      "line": 16,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_integration.py:TestIntegration.setUp": {
      "name": "setUp",
      "file": "pytestembed/tests/test_integration.py",
      "line": 19,
      "type": "method",
      "parent_class": "TestIntegration",
      "has_tests": false
    },
    "pytestembed/tests/test_integration.py:TestIntegration.test_complete_workflow_derp_example": {
      "name": "test_complete_workflow_derp_example",
      "file": "pytestembed/tests/test_integration.py",
      "line": 26,
      "type": "method",
      "parent_class": "TestIntegration",
      "has_tests": false
    },
    "pytestembed/tests/test_integration.py:TestIntegration.test_cli_test_command": {
      "name": "test_cli_test_command",
      "file": "pytestembed/tests/test_integration.py",
      "line": 65,
      "type": "method",
      "parent_class": "TestIntegration",
      "has_tests": false
    },
    "pytestembed/tests/test_integration.py:TestIntegration.test_cli_doc_command": {
      "name": "test_cli_doc_command",
      "file": "pytestembed/tests/test_integration.py",
      "line": 96,
      "type": "method",
      "parent_class": "TestIntegration",
      "has_tests": false
    },
    "pytestembed/tests/test_integration.py:TestIntegration.test_cli_output_file": {
      "name": "test_cli_output_file",
      "file": "pytestembed/tests/test_integration.py",
      "line": 131,
      "type": "method",
      "parent_class": "TestIntegration",
      "has_tests": false
    },
    "pytestembed/tests/test_integration.py:TestIntegration.test_error_handling": {
      "name": "test_error_handling",
      "file": "pytestembed/tests/test_integration.py",
      "line": 172,
      "type": "method",
      "parent_class": "TestIntegration",
      "has_tests": false
    },
    "pytestembed/tests/test_converter.py:TestPythonCodeAnalyzer": {
      "name": "TestPythonCodeAnalyzer",
      "file": "pytestembed/tests/test_converter.py",
      "line": 12,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_converter.py:TestPythonCodeAnalyzer.test_analyze_simple_function": {
      "name": "test_analyze_simple_function",
      "file": "pytestembed/tests/test_converter.py",
      "line": 15,
      "type": "method",
      "parent_class": "TestPythonCodeAnalyzer",
      "has_tests": false
    },
    "pytestembed/tests/test_converter.py:TestPythonCodeAnalyzer.test_analyze_class_with_methods": {
      "name": "test_analyze_class_with_methods",
      "file": "pytestembed/tests/test_converter.py",
      "line": 32,
      "type": "method",
      "parent_class": "TestPythonCodeAnalyzer",
      "has_tests": false
    },
    "pytestembed/tests/test_converter.py:TestPythonToPyTestEmbedConverter": {
      "name": "TestPythonToPyTestEmbedConverter",
      "file": "pytestembed/tests/test_converter.py",
      "line": 58,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_converter.py:TestPythonToPyTestEmbedConverter.setUp": {
      "name": "setUp",
      "file": "pytestembed/tests/test_converter.py",
      "line": 61,
      "type": "method",
      "parent_class": "TestPythonToPyTestEmbedConverter",
      "has_tests": false
    },
    "pytestembed/tests/test_converter.py:TestPythonToPyTestEmbedConverter.test_convert_simple_function": {
      "name": "test_convert_simple_function",
      "file": "pytestembed/tests/test_converter.py",
      "line": 65,
      "type": "method",
      "parent_class": "TestPythonToPyTestEmbedConverter",
      "has_tests": false
    },
    "pytestembed/tests/test_converter.py:TestPythonToPyTestEmbedConverter.test_convert_class_with_methods": {
      "name": "test_convert_class_with_methods",
      "file": "pytestembed/tests/test_converter.py",
      "line": 79,
      "type": "method",
      "parent_class": "TestPythonToPyTestEmbedConverter",
      "has_tests": false
    },
    "pytestembed/tests/test_converter.py:TestPythonToPyTestEmbedConverter.test_convert_function_without_docstring": {
      "name": "test_convert_function_without_docstring",
      "file": "pytestembed/tests/test_converter.py",
      "line": 98,
      "type": "method",
      "parent_class": "TestPythonToPyTestEmbedConverter",
      "has_tests": false
    },
    "pytestembed/tests/test_converter.py:TestPythonToPyTestEmbedConverter.test_convert_file_operations": {
      "name": "test_convert_file_operations",
      "file": "pytestembed/tests/test_converter.py",
      "line": 111,
      "type": "method",
      "parent_class": "TestPythonToPyTestEmbedConverter",
      "has_tests": false
    },
    "pytestembed/tests/test_converter.py:TestPythonToPyTestEmbedConverter.test_convert_complex_example": {
      "name": "test_convert_complex_example",
      "file": "pytestembed/tests/test_converter.py",
      "line": 147,
      "type": "method",
      "parent_class": "TestPythonToPyTestEmbedConverter",
      "has_tests": false
    },
    "pytestembed/tests/test_converter.py:TestPythonToPyTestEmbedConverter.test_preserve_original_code_structure": {
      "name": "test_preserve_original_code_structure",
      "file": "pytestembed/tests/test_converter.py",
      "line": 194,
      "type": "method",
      "parent_class": "TestPythonToPyTestEmbedConverter",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands": {
      "name": "TestCLICommands",
      "file": "pytestembed/tests/test_cli.py",
      "line": 19,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.setUp": {
      "name": "setUp",
      "file": "pytestembed/tests/test_cli.py",
      "line": 22,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.tearDown": {
      "name": "tearDown",
      "file": "pytestembed/tests/test_cli.py",
      "line": 28,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_cli_help": {
      "name": "test_cli_help",
      "file": "pytestembed/tests/test_cli.py",
      "line": 35,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_run_command_help": {
      "name": "test_run_command_help",
      "file": "pytestembed/tests/test_cli.py",
      "line": 42,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_generate_command_help": {
      "name": "test_generate_command_help",
      "file": "pytestembed/tests/test_cli.py",
      "line": 48,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_live_command_help": {
      "name": "test_live_command_help",
      "file": "pytestembed/tests/test_cli.py",
      "line": 54,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_config_command_help": {
      "name": "test_config_command_help",
      "file": "pytestembed/tests/test_cli.py",
      "line": 60,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_run_command_with_nonexistent_file": {
      "name": "test_run_command_with_nonexistent_file",
      "file": "pytestembed/tests/test_cli.py",
      "line": 66,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_run_command_with_sample_file": {
      "name": "test_run_command_with_sample_file",
      "file": "pytestembed/tests/test_cli.py",
      "line": 72,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_generate_command_with_invalid_args": {
      "name": "test_generate_command_with_invalid_args",
      "file": "pytestembed/tests/test_cli.py",
      "line": 93,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_generate_command_with_valid_args": {
      "name": "test_generate_command_with_valid_args",
      "file": "pytestembed/tests/test_cli.py",
      "line": 101,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_config_command": {
      "name": "test_config_command",
      "file": "pytestembed/tests/test_cli.py",
      "line": 118,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_run_command_with_conversion": {
      "name": "test_run_command_with_conversion",
      "file": "pytestembed/tests/test_cli.py",
      "line": 125,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_run_command_with_verbose": {
      "name": "test_run_command_with_verbose",
      "file": "pytestembed/tests/test_cli.py",
      "line": 150,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLICommands.test_live_command_port_option": {
      "name": "test_live_command_port_option",
      "file": "pytestembed/tests/test_cli.py",
      "line": 166,
      "type": "method",
      "parent_class": "TestCLICommands",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLIIntegration": {
      "name": "TestCLIIntegration",
      "file": "pytestembed/tests/test_cli.py",
      "line": 175,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLIIntegration.setUp": {
      "name": "setUp",
      "file": "pytestembed/tests/test_cli.py",
      "line": 178,
      "type": "method",
      "parent_class": "TestCLIIntegration",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLIIntegration.tearDown": {
      "name": "tearDown",
      "file": "pytestembed/tests/test_cli.py",
      "line": 183,
      "type": "method",
      "parent_class": "TestCLIIntegration",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLIIntegration.test_cli_ai_integration": {
      "name": "test_cli_ai_integration",
      "file": "pytestembed/tests/test_cli.py",
      "line": 190,
      "type": "method",
      "parent_class": "TestCLIIntegration",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLIIntegration.test_cli_config_integration": {
      "name": "test_cli_config_integration",
      "file": "pytestembed/tests/test_cli.py",
      "line": 216,
      "type": "method",
      "parent_class": "TestCLIIntegration",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLIErrorHandling": {
      "name": "TestCLIErrorHandling",
      "file": "pytestembed/tests/test_cli.py",
      "line": 239,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLIErrorHandling.setUp": {
      "name": "setUp",
      "file": "pytestembed/tests/test_cli.py",
      "line": 242,
      "type": "method",
      "parent_class": "TestCLIErrorHandling",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLIErrorHandling.test_invalid_command": {
      "name": "test_invalid_command",
      "file": "pytestembed/tests/test_cli.py",
      "line": 246,
      "type": "method",
      "parent_class": "TestCLIErrorHandling",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLIErrorHandling.test_missing_required_arguments": {
      "name": "test_missing_required_arguments",
      "file": "pytestembed/tests/test_cli.py",
      "line": 252,
      "type": "method",
      "parent_class": "TestCLIErrorHandling",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLIErrorHandling.test_invalid_file_paths": {
      "name": "test_invalid_file_paths",
      "file": "pytestembed/tests/test_cli.py",
      "line": 260,
      "type": "method",
      "parent_class": "TestCLIErrorHandling",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLIErrorHandling.test_invalid_line_numbers": {
      "name": "test_invalid_line_numbers",
      "file": "pytestembed/tests/test_cli.py",
      "line": 268,
      "type": "method",
      "parent_class": "TestCLIErrorHandling",
      "has_tests": false
    },
    "pytestembed/tests/test_cli.py:TestCLIErrorHandling.test_permission_errors": {
      "name": "test_permission_errors",
      "file": "pytestembed/tests/test_cli.py",
      "line": 287,
      "type": "method",
      "parent_class": "TestCLIErrorHandling",
      "has_tests": false
    },
    "pytestembed/tests/test_doc_generator.py:TestDocGenerator": {
      "name": "TestDocGenerator",
      "file": "pytestembed/tests/test_doc_generator.py",
      "line": 8,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_doc_generator.py:TestDocGenerator.setUp": {
      "name": "setUp",
      "file": "pytestembed/tests/test_doc_generator.py",
      "line": 11,
      "type": "method",
      "parent_class": "TestDocGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_doc_generator.py:TestDocGenerator.test_generate_simple_class_docs": {
      "name": "test_generate_simple_class_docs",
      "file": "pytestembed/tests/test_doc_generator.py",
      "line": 16,
      "type": "method",
      "parent_class": "TestDocGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_doc_generator.py:TestDocGenerator.test_generate_function_docs": {
      "name": "test_generate_function_docs",
      "file": "pytestembed/tests/test_doc_generator.py",
      "line": 47,
      "type": "method",
      "parent_class": "TestDocGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_doc_generator.py:TestDocGenerator.test_generate_global_docs": {
      "name": "test_generate_global_docs",
      "file": "pytestembed/tests/test_doc_generator.py",
      "line": 67,
      "type": "method",
      "parent_class": "TestDocGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_doc_generator.py:TestDocGenerator.test_generate_derp_example_docs": {
      "name": "test_generate_derp_example_docs",
      "file": "pytestembed/tests/test_doc_generator.py",
      "line": 89,
      "type": "method",
      "parent_class": "TestDocGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_doc_generator.py:TestDocGenerator.test_text_enhancement": {
      "name": "test_text_enhancement",
      "file": "pytestembed/tests/test_doc_generator.py",
      "line": 135,
      "type": "method",
      "parent_class": "TestDocGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_doc_generator.py:TestDocGenerator.test_empty_doc_blocks": {
      "name": "test_empty_doc_blocks",
      "file": "pytestembed/tests/test_doc_generator.py",
      "line": 153,
      "type": "method",
      "parent_class": "TestDocGenerator",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager": {
      "name": "TestConfigManager",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 17,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager.setUp": {
      "name": "setUp",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 20,
      "type": "method",
      "parent_class": "TestConfigManager",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager.tearDown": {
      "name": "tearDown",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 32,
      "type": "method",
      "parent_class": "TestConfigManager",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager.test_default_config_creation": {
      "name": "test_default_config_creation",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 38,
      "type": "method",
      "parent_class": "TestConfigManager",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager.test_config_save_and_load": {
      "name": "test_config_save_and_load",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 60,
      "type": "method",
      "parent_class": "TestConfigManager",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager.test_ai_provider_configuration": {
      "name": "test_ai_provider_configuration",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 85,
      "type": "method",
      "parent_class": "TestConfigManager",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager.test_custom_prompts": {
      "name": "test_custom_prompts",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 99,
      "type": "method",
      "parent_class": "TestConfigManager",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager.test_model_discovery": {
      "name": "test_model_discovery",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 125,
      "type": "method",
      "parent_class": "TestConfigManager",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager.test_connection_testing": {
      "name": "test_connection_testing",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 146,
      "type": "method",
      "parent_class": "TestConfigManager",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager.test_config_reset": {
      "name": "test_config_reset",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 162,
      "type": "method",
      "parent_class": "TestConfigManager",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager.test_config_import_export": {
      "name": "test_config_import_export",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 178,
      "type": "method",
      "parent_class": "TestConfigManager",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager.test_malformed_config_file": {
      "name": "test_malformed_config_file",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 203,
      "type": "method",
      "parent_class": "TestConfigManager",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigManager.test_missing_config_fields": {
      "name": "test_missing_config_fields",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 215,
      "type": "method",
      "parent_class": "TestConfigManager",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigDataClasses": {
      "name": "TestConfigDataClasses",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 241,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigDataClasses.test_ai_provider_config": {
      "name": "test_ai_provider_config",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 244,
      "type": "method",
      "parent_class": "TestConfigDataClasses",
      "has_tests": false
    },
    "pytestembed/tests/test_config_manager.py:TestConfigDataClasses.test_pytestembed_config": {
      "name": "test_pytestembed_config",
      "file": "pytestembed/tests/test_config_manager.py",
      "line": 265,
      "type": "method",
      "parent_class": "TestConfigDataClasses",
      "has_tests": false
    },
    "pytestembed/tests/fixtures/legacy_python.py:simple_function": {
      "name": "simple_function",
      "file": "pytestembed/tests/fixtures/legacy_python.py",
      "line": 8,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/fixtures/legacy_python.py:function_with_docstring": {
      "name": "function_with_docstring",
      "file": "pytestembed/tests/fixtures/legacy_python.py",
      "line": 12,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/fixtures/legacy_python.py:function_without_docstring": {
      "name": "function_without_docstring",
      "file": "pytestembed/tests/fixtures/legacy_python.py",
      "line": 25,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/fixtures/legacy_python.py:SimpleClass": {
      "name": "SimpleClass",
      "file": "pytestembed/tests/fixtures/legacy_python.py",
      "line": 28,
      "type": "class",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/fixtures/legacy_python.py:SimpleClass.__init__": {
      "name": "__init__",
      "file": "pytestembed/tests/fixtures/legacy_python.py",
      "line": 31,
      "type": "method",
      "parent_class": "SimpleClass",
      "has_tests": false
    },
    "pytestembed/tests/fixtures/legacy_python.py:SimpleClass.get_name": {
      "name": "get_name",
      "file": "pytestembed/tests/fixtures/legacy_python.py",
      "line": 35,
      "type": "method",
      "parent_class": "SimpleClass",
      "has_tests": false
    },
    "pytestembed/tests/fixtures/legacy_python.py:SimpleClass.set_name": {
      "name": "set_name",
      "file": "pytestembed/tests/fixtures/legacy_python.py",
      "line": 39,
      "type": "method",
      "parent_class": "SimpleClass",
      "has_tests": false
    },
    "pytestembed/tests/fixtures/legacy_python.py:complex_function": {
      "name": "complex_function",
      "file": "pytestembed/tests/fixtures/legacy_python.py",
      "line": 43,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    },
    "pytestembed/tests/fixtures/legacy_python.py:error_prone_function": {
      "name": "error_prone_function",
      "file": "pytestembed/tests/fixtures/legacy_python.py",
      "line": 72,
      "type": "function",
      "parent_class": null,
      "has_tests": false
    }
  },
  "edges": [
    {
      "from": "pytestembed/pytestembed/runner.py:TestRunner.run_tests_from_file",
      "to": "pytestembed/pytestembed/runner.py:TestRunner._get_cached_program",
      "type": "calls",
      "line": 31
    },
    {
      "from": "pytestembed/pytestembed/runner.py:TestRunner.run_tests_from_file",
      "to": "pytestembed/pytestembed/runner.py:TestRunner.run_tests",
      "type": "calls",
      "line": 31
    },
    {
      "from": "pytestembed/pytestembed/runner.py:TestRunner.run_tests_from_file",
      "to": "pytestembed/pytestembed/runner.py:TestRunner._cache_program",
      "type": "calls",
      "line": 31
    },
    {
      "from": "pytestembed/pytestembed/runner.py:TestRunner.run_tests",
      "to": "pytestembed/pytestembed/runner.py:TestRunner._execute_tests",
      "type": "calls",
      "line": 60
    },
    {
      "from": "pytestembed/pytestembed/runner.py:TestRunner._execute_tests",
      "to": "pytestembed/pytestembed/runner.py:TestRunner._remove_test_doc_blocks",
      "type": "calls",
      "line": 85
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter.format_file",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter.format_content",
      "type": "calls",
      "line": 38
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter.format_content",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._post_process",
      "type": "calls",
      "line": 56
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter.format_content",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_test_block",
      "type": "calls",
      "line": 56
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter.format_content",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_doc_block",
      "type": "calls",
      "line": 56
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_test_block",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._looks_like_test_case",
      "type": "calls",
      "line": 87
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_test_block",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_test_cases",
      "type": "calls",
      "line": 87
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_test_cases",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_single_test_case",
      "type": "calls",
      "line": 129
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_test_cases",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._is_complete_test_case",
      "type": "calls",
      "line": 129
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_single_test_case",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_expression",
      "type": "calls",
      "line": 181
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_single_test_case",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._normalize_quotes",
      "type": "calls",
      "line": 181
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_doc_block",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter._format_documentation",
      "type": "calls",
      "line": 247
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter.check_formatting",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter.format_content",
      "type": "calls",
      "line": 331
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:format_file",
      "to": "pytestembed/pytestembed/formatter.py:format_file",
      "type": "calls",
      "line": 383
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:format_file",
      "to": "pytestembed/pytestembed/formatter.py:PyTestEmbedFormatter",
      "type": "calls",
      "line": 383
    },
    {
      "from": "pytestembed/pytestembed/formatter.py:format_directory",
      "to": "pytestembed/pytestembed/formatter.py:format_file",
      "type": "calls",
      "line": 392
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:InputGenerator.generate_inputs",
      "to": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_value",
      "type": "calls",
      "line": 55
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_value",
      "to": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_generic_type",
      "type": "calls",
      "line": 81
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_value",
      "to": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_int",
      "type": "calls",
      "line": 81
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_list",
      "to": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_value",
      "type": "calls",
      "line": 123
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_dict",
      "to": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_value",
      "type": "calls",
      "line": 132
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_dict",
      "to": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_string",
      "type": "calls",
      "line": 132
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_generic_type",
      "to": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_dict",
      "type": "calls",
      "line": 145
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_generic_type",
      "to": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_list",
      "type": "calls",
      "line": 145
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_generic_type",
      "to": "pytestembed/pytestembed/property_testing.py:InputGenerator._generate_int",
      "type": "calls",
      "line": 145
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:PropertyChecker.__init__",
      "to": "pytestembed/pytestembed/property_testing.py:InputGenerator",
      "type": "calls",
      "line": 161
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:PropertyChecker.check_property",
      "to": "pytestembed/pytestembed/property_testing.py:PropertyTestResult",
      "type": "calls",
      "line": 166
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:PropertyTestParser.extract_properties",
      "to": "pytestembed/pytestembed/property_testing.py:PropertyTestParser._parse_property_line",
      "type": "calls",
      "line": 233
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:PropertyBasedTester.__init__",
      "to": "pytestembed/pytestembed/property_testing.py:PropertyChecker",
      "type": "calls",
      "line": 277
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:PropertyBasedTester.__init__",
      "to": "pytestembed/pytestembed/property_testing.py:PropertyTestParser",
      "type": "calls",
      "line": 277
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:PropertyBasedTester.run_property_tests",
      "to": "pytestembed/pytestembed/property_testing.py:PropertyBasedTester._create_property_function",
      "type": "calls",
      "line": 283
    },
    {
      "from": "pytestembed/pytestembed/property_testing.py:PropertyBasedTester.run_property_tests",
      "to": "pytestembed/pytestembed/property_testing.py:PropertyTestResult",
      "type": "calls",
      "line": 283
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.__init__",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._load_migration_rules",
      "type": "calls",
      "line": 35
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._load_migration_rules",
      "to": "pytestembed/pytestembed/migration_tool.py:MigrationRule",
      "type": "calls",
      "line": 46
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.migrate_file",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._detect_version",
      "type": "calls",
      "line": 74
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.migrate_file",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._apply_migrations",
      "type": "calls",
      "line": 74
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.migrate_file",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._create_backup",
      "type": "calls",
      "line": 74
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.migrate_directory",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._is_pytestembed_file",
      "type": "calls",
      "line": 111
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.migrate_directory",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.migrate_file",
      "type": "calls",
      "line": 111
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._apply_migrations",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._find_migration_path",
      "type": "calls",
      "line": 145
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.generate_migration_report",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._is_pytestembed_file",
      "type": "calls",
      "line": 218
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.generate_migration_report",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._detect_version",
      "type": "calls",
      "line": 218
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator.validate_migration",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator._detect_version",
      "type": "calls",
      "line": 257
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:LegacyConverter.__init__",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator",
      "type": "calls",
      "line": 299
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:migrate_file",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator",
      "type": "calls",
      "line": 317
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:migrate_file",
      "to": "pytestembed/pytestembed/migration_tool.py:migrate_file",
      "type": "calls",
      "line": 317
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:migrate_project",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator",
      "type": "calls",
      "line": 323
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:generate_migration_report",
      "to": "pytestembed/pytestembed/migration_tool.py:generate_migration_report",
      "type": "calls",
      "line": 329
    },
    {
      "from": "pytestembed/pytestembed/migration_tool.py:generate_migration_report",
      "to": "pytestembed/pytestembed/migration_tool.py:PyTestEmbedMigrator",
      "type": "calls",
      "line": 329
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer.analyze_function",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer._extract_function_source",
      "type": "calls",
      "line": 56
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer.analyze_function",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer._remove_pytestembed_blocks",
      "type": "calls",
      "line": 56
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer.analyze_function",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer._extract_function_context",
      "type": "calls",
      "line": 56
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer.analyze_function",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer._find_function_at_line",
      "type": "calls",
      "line": 56
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer._extract_function_context",
      "to": "pytestembed/pytestembed/smart_generator.py:CodeContext",
      "type": "calls",
      "line": 201
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer._extract_function_context",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer._calculate_complexity",
      "type": "calls",
      "line": 201
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator.__init__",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeAnalyzer",
      "type": "calls",
      "line": 286
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator.generate_for_function",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_documentation",
      "type": "calls",
      "line": 295
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator.generate_for_function",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._get_style_preferences",
      "type": "calls",
      "line": 295
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator.generate_for_function",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_both",
      "type": "calls",
      "line": 295
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator.generate_for_function",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_tests",
      "type": "calls",
      "line": 295
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator.generate_for_function",
      "to": "pytestembed/pytestembed/smart_generator.py:GenerationRequest",
      "type": "calls",
      "line": 295
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_both",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_template_tests",
      "type": "calls",
      "line": 332
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_both",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_combined_response",
      "type": "calls",
      "line": 332
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_both",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_template_documentation",
      "type": "calls",
      "line": 332
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_both",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._get_combined_schema",
      "type": "calls",
      "line": 332
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_both",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._create_combined_prompt",
      "type": "calls",
      "line": 332
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_tests",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._get_test_schema",
      "type": "calls",
      "line": 358
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_tests",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_template_tests",
      "type": "calls",
      "line": 358
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_tests",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_structured_test_response",
      "type": "calls",
      "line": 358
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_tests",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._create_test_prompt",
      "type": "calls",
      "line": 358
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_documentation",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_structured_doc_response",
      "type": "calls",
      "line": 381
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_documentation",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._create_doc_prompt",
      "type": "calls",
      "line": 381
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_documentation",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._get_doc_schema",
      "type": "calls",
      "line": 381
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_documentation",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_template_documentation",
      "type": "calls",
      "line": 381
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_structured_test_response",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_template_tests",
      "type": "calls",
      "line": 792
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_structured_doc_response",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_template_documentation",
      "type": "calls",
      "line": 819
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_combined_response",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_template_tests",
      "type": "calls",
      "line": 848
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_combined_response",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_template_documentation",
      "type": "calls",
      "line": 848
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_test_response",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_template_tests",
      "type": "calls",
      "line": 907
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._format_doc_response",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator._generate_template_documentation",
      "type": "calls",
      "line": 939
    },
    {
      "from": "pytestembed/pytestembed/smart_generator.py:generate_smart_blocks",
      "to": "pytestembed/pytestembed/smart_generator.py:SmartCodeGenerator",
      "type": "calls",
      "line": 1015
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager.__init__",
      "to": "pytestembed/pytestembed/config_manager.py:ConfigManager._load_config",
      "type": "calls",
      "line": 65
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_config",
      "to": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_doc_prompt",
      "type": "calls",
      "line": 70
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_config",
      "to": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_test_prompt",
      "type": "calls",
      "line": 70
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_config",
      "to": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_unified_docs_prompt",
      "type": "calls",
      "line": 70
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_config",
      "to": "pytestembed/pytestembed/config_manager.py:PyTestEmbedConfig",
      "type": "calls",
      "line": 70
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_config",
      "to": "pytestembed/pytestembed/config_manager.py:AIProviderConfig",
      "type": "calls",
      "line": 70
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_config",
      "to": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_conversion_prompt",
      "type": "calls",
      "line": 70
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager._load_config",
      "to": "pytestembed/pytestembed/config_manager.py:PyTestEmbedConfig",
      "type": "calls",
      "line": 142
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager._load_config",
      "to": "pytestembed/pytestembed/config_manager.py:AIProviderConfig",
      "type": "calls",
      "line": 142
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager._load_config",
      "to": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_config",
      "type": "calls",
      "line": 142
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager.get_available_models",
      "to": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_ollama_models",
      "type": "calls",
      "line": 221
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager.get_available_models",
      "to": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_lmstudio_models",
      "type": "calls",
      "line": 221
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager.reset_to_defaults",
      "to": "pytestembed/pytestembed/config_manager.py:ConfigManager._get_default_config",
      "type": "calls",
      "line": 288
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager.import_config",
      "to": "pytestembed/pytestembed/config_manager.py:PyTestEmbedConfig",
      "type": "calls",
      "line": 302
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:ConfigManager.import_config",
      "to": "pytestembed/pytestembed/config_manager.py:AIProviderConfig",
      "type": "calls",
      "line": 302
    },
    {
      "from": "pytestembed/pytestembed/config_manager.py:get_config_manager",
      "to": "pytestembed/pytestembed/config_manager.py:ConfigManager",
      "type": "calls",
      "line": 320
    },
    {
      "from": "pytestembed/pytestembed/live_runner.py:LiveTestRunner.transform_assertion_for_context",
      "to": "pytestembed/pytestembed/live_runner.py:LiveTestRunner._transform_for_class_instance",
      "type": "calls",
      "line": 678
    },
    {
      "from": "pytestembed/pytestembed/live_runner.py:LiveTestRunner.transform_assertion_for_context",
      "to": "pytestembed/pytestembed/live_runner.py:LiveTestRunner.find_class_name_for_method",
      "type": "calls",
      "line": 678
    },
    {
      "from": "pytestembed/pytestembed/live_runner.py:LiveTestRunner.stop",
      "to": "pytestembed/pytestembed/live_runner.py:LiveTestRunner.stop",
      "type": "calls",
      "line": 926
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager._is_cache_valid",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_file_hash",
      "type": "calls",
      "line": 113
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_parsed_file_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._is_cache_valid",
      "type": "calls",
      "line": 128
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_parsed_file_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._load_cache_entry",
      "type": "calls",
      "line": 128
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_parsed_file_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_key",
      "type": "calls",
      "line": 128
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_parsed_file_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_file_path",
      "type": "calls",
      "line": 128
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_parsed_file_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._cleanup_memory_cache",
      "type": "calls",
      "line": 128
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_parsed_file_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._save_cache_entry",
      "type": "calls",
      "line": 155
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_parsed_file_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_key",
      "type": "calls",
      "line": 155
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_parsed_file_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_file_path",
      "type": "calls",
      "line": 155
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_parsed_file_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheEntry",
      "type": "calls",
      "line": 155
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_parsed_file_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._cleanup_memory_cache",
      "type": "calls",
      "line": 155
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_parsed_file_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_file_hash",
      "type": "calls",
      "line": 155
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_ai_generation_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._is_cache_valid",
      "type": "calls",
      "line": 181
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_ai_generation_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._load_cache_entry",
      "type": "calls",
      "line": 181
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_ai_generation_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_key",
      "type": "calls",
      "line": 181
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_ai_generation_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_file_path",
      "type": "calls",
      "line": 181
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_ai_generation_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._cleanup_memory_cache",
      "type": "calls",
      "line": 181
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_ai_generation_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._save_cache_entry",
      "type": "calls",
      "line": 207
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_ai_generation_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_key",
      "type": "calls",
      "line": 207
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_ai_generation_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_file_path",
      "type": "calls",
      "line": 207
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_ai_generation_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheEntry",
      "type": "calls",
      "line": 207
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_ai_generation_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._cleanup_memory_cache",
      "type": "calls",
      "line": 207
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_test_results_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._is_cache_valid",
      "type": "calls",
      "line": 232
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_test_results_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._load_cache_entry",
      "type": "calls",
      "line": 232
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_test_results_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_key",
      "type": "calls",
      "line": 232
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_test_results_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_file_path",
      "type": "calls",
      "line": 232
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.get_test_results_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._cleanup_memory_cache",
      "type": "calls",
      "line": 232
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_test_results_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._save_cache_entry",
      "type": "calls",
      "line": 257
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_test_results_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_key",
      "type": "calls",
      "line": 257
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_test_results_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_cache_file_path",
      "type": "calls",
      "line": 257
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_test_results_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheEntry",
      "type": "calls",
      "line": 257
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_test_results_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._cleanup_memory_cache",
      "type": "calls",
      "line": 257
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.set_test_results_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._get_file_hash",
      "type": "calls",
      "line": 257
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.cleanup_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._cleanup_directory",
      "type": "calls",
      "line": 300
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.cleanup_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._is_cache_valid",
      "type": "calls",
      "line": 300
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager._cleanup_directory",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._is_cache_valid",
      "type": "calls",
      "line": 323
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager._cleanup_directory",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._load_cache_entry",
      "type": "calls",
      "line": 323
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:CacheManager.clear_cache",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager._clear_directory",
      "type": "calls",
      "line": 373
    },
    {
      "from": "pytestembed/pytestembed/cache_manager.py:get_cache_manager",
      "to": "pytestembed/pytestembed/cache_manager.py:CacheManager",
      "type": "calls",
      "line": 405
    },
    {
      "from": "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator.generate_tests",
      "to": "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator._generate_fallback_tests",
      "type": "calls",
      "line": 20
    },
    {
      "from": "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator.generate_tests",
      "to": "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator._parse_ai_response",
      "type": "calls",
      "line": 20
    },
    {
      "from": "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator.generate_tests",
      "to": "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator._create_test_prompt",
      "type": "calls",
      "line": 20
    },
    {
      "from": "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator._create_test_prompt",
      "to": "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator._extract_function_source",
      "type": "calls",
      "line": 45
    },
    {
      "from": "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator.__init__",
      "to": "pytestembed/pytestembed/ai_test_generator.py:AITestGenerator",
      "type": "calls",
      "line": 159
    },
    {
      "from": "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator.generate_comprehensive_tests",
      "to": "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator._generate_enhanced_ai_tests",
      "type": "calls",
      "line": 162
    },
    {
      "from": "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator.generate_comprehensive_tests",
      "to": "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator._analyze_function",
      "type": "calls",
      "line": 162
    },
    {
      "from": "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator._generate_enhanced_ai_tests",
      "to": "pytestembed/pytestembed/ai_test_generator.py:SmartTestGenerator._create_enhanced_prompt",
      "type": "calls",
      "line": 202
    },
    {
      "from": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.build_graph",
      "to": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._analyze_file",
      "type": "calls",
      "line": 55
    },
    {
      "from": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.build_graph",
      "to": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._resolve_dependencies",
      "type": "calls",
      "line": 55
    },
    {
      "from": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.build_graph",
      "to": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._identify_dead_code",
      "type": "calls",
      "line": 55
    },
    {
      "from": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.build_graph",
      "to": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._should_skip_file",
      "type": "calls",
      "line": 55
    },
    {
      "from": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._analyze_file",
      "to": "pytestembed/pytestembed/dependency_graph.py:CodeElementVisitor",
      "type": "calls",
      "line": 81
    },
    {
      "from": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._resolve_dependencies",
      "to": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._resolve_call",
      "type": "calls",
      "line": 96
    },
    {
      "from": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph._resolve_dependencies",
      "to": "pytestembed/pytestembed/dependency_graph.py:DependencyEdge",
      "type": "calls",
      "line": 96
    },
    {
      "from": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.get_test_impact",
      "to": "pytestembed/pytestembed/dependency_graph.py:CodeDependencyGraph.get_dependents",
      "type": "calls",
      "line": 159
    },
    {
      "from": "pytestembed/pytestembed/dependency_graph.py:CodeElementVisitor.visit_ClassDef",
      "to": "pytestembed/pytestembed/dependency_graph.py:CodeElement",
      "type": "calls",
      "line": 225
    },
    {
      "from": "pytestembed/pytestembed/dependency_graph.py:CodeElementVisitor.visit_FunctionDef",
      "to": "pytestembed/pytestembed/dependency_graph.py:CodeElement",
      "type": "calls",
      "line": 244
    },
    {
      "from": "pytestembed/pytestembed/dependency_graph.py:CodeElementVisitor.visit_FunctionDef",
      "to": "pytestembed/pytestembed/dependency_graph.py:FunctionCallVisitor",
      "type": "calls",
      "line": 244
    },
    {
      "from": "pytestembed/pytestembed/advanced_testing_cli.py:main",
      "to": "pytestembed/pytestembed/advanced_testing_cli.py:failure_prediction_command",
      "type": "calls",
      "line": 253
    },
    {
      "from": "pytestembed/pytestembed/advanced_testing_cli.py:main",
      "to": "pytestembed/pytestembed/advanced_testing_cli.py:benchmark_command",
      "type": "calls",
      "line": 253
    },
    {
      "from": "pytestembed/pytestembed/advanced_testing_cli.py:main",
      "to": "pytestembed/pytestembed/advanced_testing_cli.py:property_testing_command",
      "type": "calls",
      "line": 253
    },
    {
      "from": "pytestembed/pytestembed/advanced_testing_cli.py:main",
      "to": "pytestembed/pytestembed/advanced_testing_cli.py:smart_selection_command",
      "type": "calls",
      "line": 253
    },
    {
      "from": "pytestembed/pytestembed/advanced_testing_cli.py:main",
      "to": "pytestembed/pytestembed/advanced_testing_cli.py:print_banner",
      "type": "calls",
      "line": 253
    },
    {
      "from": "pytestembed/pytestembed/converter.py:PythonToPyTestEmbedConverter.convert_file",
      "to": "pytestembed/pytestembed/converter.py:PythonToPyTestEmbedConverter.convert_content",
      "type": "calls",
      "line": 25
    },
    {
      "from": "pytestembed/pytestembed/converter.py:PythonToPyTestEmbedConverter.convert_content",
      "to": "pytestembed/pytestembed/converter.py:ContentConverter",
      "type": "calls",
      "line": 38
    },
    {
      "from": "pytestembed/pytestembed/converter.py:PythonToPyTestEmbedConverter.convert_content",
      "to": "pytestembed/pytestembed/converter.py:PythonCodeAnalyzer",
      "type": "calls",
      "line": 38
    },
    {
      "from": "pytestembed/pytestembed/converter.py:ContentConverter.convert",
      "to": "pytestembed/pytestembed/converter.py:ContentConverter._get_indentation",
      "type": "calls",
      "line": 123
    },
    {
      "from": "pytestembed/pytestembed/converter.py:ContentConverter.convert",
      "to": "pytestembed/pytestembed/converter.py:ContentConverter._generate_test_block",
      "type": "calls",
      "line": 123
    },
    {
      "from": "pytestembed/pytestembed/converter.py:ContentConverter.convert",
      "to": "pytestembed/pytestembed/converter.py:ContentConverter._generate_doc_block",
      "type": "calls",
      "line": 123
    },
    {
      "from": "pytestembed/pytestembed/converter.py:ContentConverter._generate_test_block",
      "to": "pytestembed/pytestembed/converter.py:ContentConverter._generate_placeholder_tests",
      "type": "calls",
      "line": 172
    },
    {
      "from": "pytestembed/pytestembed/converter.py:ContentConverter._generate_test_block",
      "to": "pytestembed/pytestembed/converter.py:ContentConverter._generate_ai_tests",
      "type": "calls",
      "line": 172
    },
    {
      "from": "pytestembed/pytestembed/converter.py:ContentConverter._generate_doc_block",
      "to": "pytestembed/pytestembed/converter.py:ContentConverter._generate_ai_documentation",
      "type": "calls",
      "line": 185
    },
    {
      "from": "pytestembed/pytestembed/converter.py:ContentConverter._generate_ai_tests",
      "to": "pytestembed/pytestembed/converter.py:ContentConverter._generate_placeholder_tests",
      "type": "calls",
      "line": 217
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer.build_dependency_graph",
      "to": "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer._extract_function_definitions",
      "type": "calls",
      "line": 65
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer.build_dependency_graph",
      "to": "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer._extract_function_calls",
      "type": "calls",
      "line": 65
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer.build_dependency_graph",
      "to": "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer._extract_imports",
      "type": "calls",
      "line": 65
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer.build_dependency_graph",
      "to": "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer._should_skip_file",
      "type": "calls",
      "line": 65
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:GitChangeAnalyzer.get_changes_since_commit",
      "to": "pytestembed/pytestembed/smart_test_selection.py:GitChangeAnalyzer._analyze_file_changes",
      "type": "calls",
      "line": 194
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:GitChangeAnalyzer._analyze_file_changes",
      "to": "pytestembed/pytestembed/smart_test_selection.py:CodeChange",
      "type": "calls",
      "line": 222
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:GitChangeAnalyzer._analyze_file_changes",
      "to": "pytestembed/pytestembed/smart_test_selection.py:GitChangeAnalyzer._extract_function_from_line",
      "type": "calls",
      "line": 222
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.__init__",
      "to": "pytestembed/pytestembed/smart_test_selection.py:DependencyAnalyzer",
      "type": "calls",
      "line": 289
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.__init__",
      "to": "pytestembed/pytestembed/smart_test_selection.py:GitChangeAnalyzer",
      "type": "calls",
      "line": 289
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.__init__",
      "to": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._load_test_history",
      "type": "calls",
      "line": 289
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.select_tests",
      "to": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._calculate_test_impacts",
      "type": "calls",
      "line": 297
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.select_tests",
      "to": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._select_tests_by_criteria",
      "type": "calls",
      "line": 297
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.select_tests",
      "to": "pytestembed/pytestembed/smart_test_selection.py:TestSelection",
      "type": "calls",
      "line": 297
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.select_tests",
      "to": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._calculate_confidence_score",
      "type": "calls",
      "line": 297
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.select_tests",
      "to": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._find_all_tests",
      "type": "calls",
      "line": 297
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.select_tests",
      "to": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._generate_selection_reasons",
      "type": "calls",
      "line": 297
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._find_all_tests",
      "to": "pytestembed/pytestembed/smart_test_selection.py:TestImpact",
      "type": "calls",
      "line": 349
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._select_tests_by_criteria",
      "to": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._calculate_confidence_score",
      "type": "calls",
      "line": 424
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector.update_test_history",
      "to": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector._save_test_history",
      "type": "calls",
      "line": 516
    },
    {
      "from": "pytestembed/pytestembed/smart_test_selection.py:run_smart_test_selection",
      "to": "pytestembed/pytestembed/smart_test_selection.py:SmartTestSelector",
      "type": "calls",
      "line": 554
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser.parse_file",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser.parse_content",
      "type": "calls",
      "line": 104
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_file_content",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser.parse_content",
      "type": "calls",
      "line": 132
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser.parse_content",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_program",
      "type": "calls",
      "line": 136
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_program",
      "to": "pytestembed/pytestembed/parser.py:ParsedProgram",
      "type": "calls",
      "line": 151
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_program",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_class",
      "type": "calls",
      "line": 151
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_program",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_test_block",
      "type": "calls",
      "line": 151
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_program",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_function",
      "type": "calls",
      "line": 151
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_program",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_doc_block",
      "type": "calls",
      "line": 151
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_class",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_test_block",
      "type": "calls",
      "line": 188
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_class",
      "to": "pytestembed/pytestembed/parser.py:ClassDef",
      "type": "calls",
      "line": 188
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_class",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_method_with_blocks",
      "type": "calls",
      "line": 188
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_class",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_doc_block",
      "type": "calls",
      "line": 188
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_class",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._get_indent_level",
      "type": "calls",
      "line": 188
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_method_with_blocks",
      "to": "pytestembed/pytestembed/parser.py:MethodDef",
      "type": "calls",
      "line": 262
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_method_with_blocks",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_test_block",
      "type": "calls",
      "line": 262
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_method_with_blocks",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_doc_block",
      "type": "calls",
      "line": 262
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_method_with_blocks",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._get_indent_level",
      "type": "calls",
      "line": 262
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_method",
      "to": "pytestembed/pytestembed/parser.py:MethodDef",
      "type": "calls",
      "line": 340
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_method",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_test_block",
      "type": "calls",
      "line": 340
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_method",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_doc_block",
      "type": "calls",
      "line": 340
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_method",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._get_indent_level",
      "type": "calls",
      "line": 340
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_function",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_test_block",
      "type": "calls",
      "line": 400
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_function",
      "to": "pytestembed/pytestembed/parser.py:FunctionDef",
      "type": "calls",
      "line": 400
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_function",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_doc_block",
      "type": "calls",
      "line": 400
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_function",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._get_indent_level",
      "type": "calls",
      "line": 400
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_test_block",
      "to": "pytestembed/pytestembed/parser.py:TestCase",
      "type": "calls",
      "line": 472
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_test_block",
      "to": "pytestembed/pytestembed/parser.py:TestBlock",
      "type": "calls",
      "line": 472
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_test_block",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._get_indent_level",
      "type": "calls",
      "line": 472
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_doc_block",
      "to": "pytestembed/pytestembed/parser.py:DocBlock",
      "type": "calls",
      "line": 535
    },
    {
      "from": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._parse_doc_block",
      "to": "pytestembed/pytestembed/parser.py:PyTestEmbedParser._get_indent_level",
      "type": "calls",
      "line": 535
    },
    {
      "from": "pytestembed/pytestembed/generator.py:TestGenerator.generate_tests",
      "to": "pytestembed/pytestembed/generator.py:TestGenerator._generate_function_tests",
      "type": "calls",
      "line": 15
    },
    {
      "from": "pytestembed/pytestembed/generator.py:TestGenerator.generate_tests",
      "to": "pytestembed/pytestembed/generator.py:TestGenerator._generate_global_tests",
      "type": "calls",
      "line": 15
    },
    {
      "from": "pytestembed/pytestembed/generator.py:TestGenerator.generate_tests",
      "to": "pytestembed/pytestembed/generator.py:TestGenerator._generate_class_tests",
      "type": "calls",
      "line": 15
    },
    {
      "from": "pytestembed/pytestembed/generator.py:TestGenerator._generate_class_tests",
      "to": "pytestembed/pytestembed/generator.py:TestGenerator._generate_method_test_methods",
      "type": "calls",
      "line": 54
    },
    {
      "from": "pytestembed/pytestembed/generator.py:TestGenerator._generate_method_test_methods",
      "to": "pytestembed/pytestembed/generator.py:TestGenerator._generate_assertion",
      "type": "calls",
      "line": 86
    },
    {
      "from": "pytestembed/pytestembed/generator.py:TestGenerator._generate_function_tests",
      "to": "pytestembed/pytestembed/generator.py:TestGenerator._generate_function_test_methods",
      "type": "calls",
      "line": 108
    },
    {
      "from": "pytestembed/pytestembed/generator.py:TestGenerator._generate_function_test_methods",
      "to": "pytestembed/pytestembed/generator.py:TestGenerator._generate_assertion",
      "type": "calls",
      "line": 128
    },
    {
      "from": "pytestembed/pytestembed/generator.py:TestGenerator._generate_global_tests",
      "to": "pytestembed/pytestembed/generator.py:TestGenerator._generate_global_test_methods",
      "type": "calls",
      "line": 150
    },
    {
      "from": "pytestembed/pytestembed/generator.py:TestGenerator._generate_global_test_methods",
      "to": "pytestembed/pytestembed/generator.py:TestGenerator._replace_method_calls_global",
      "type": "calls",
      "line": 179
    },
    {
      "from": "pytestembed/pytestembed/generator.py:TestGenerator._generate_global_test_methods",
      "to": "pytestembed/pytestembed/generator.py:TestGenerator._generate_assertion_global",
      "type": "calls",
      "line": 179
    },
    {
      "from": "pytestembed/pytestembed/generator.py:TestGenerator._generate_assertion",
      "to": "pytestembed/pytestembed/generator.py:TestGenerator._replace_method_calls",
      "type": "calls",
      "line": 202
    },
    {
      "from": "pytestembed/pytestembed/generator.py:TestGenerator._generate_assertion_global",
      "to": "pytestembed/pytestembed/generator.py:TestGenerator._replace_method_calls_global",
      "type": "calls",
      "line": 358
    },
    {
      "from": "pytestembed/pytestembed/cli.py:run",
      "to": "pytestembed/pytestembed/cli.py:run_tests",
      "type": "calls",
      "line": 36
    },
    {
      "from": "pytestembed/pytestembed/cli.py:run",
      "to": "pytestembed/pytestembed/cli.py:convert_file",
      "type": "calls",
      "line": 36
    },
    {
      "from": "pytestembed/pytestembed/cli.py:run",
      "to": "pytestembed/pytestembed/cli.py:generate_documentation",
      "type": "calls",
      "line": 36
    },
    {
      "from": "pytestembed/pytestembed/cli.py:run_tests",
      "to": "pytestembed/pytestembed/cli.py:remove_test_doc_blocks",
      "type": "calls",
      "line": 87
    },
    {
      "from": "pytestembed/pytestembed/cli.py:run_tests",
      "to": "pytestembed/pytestembed/cli.py:run",
      "type": "calls",
      "line": 87
    },
    {
      "from": "pytestembed/pytestembed/cli.py:convert_file",
      "to": "pytestembed/pytestembed/cli.py:convert_file",
      "type": "calls",
      "line": 190
    },
    {
      "from": "pytestembed/pytestembed/cli.py:live",
      "to": "pytestembed/pytestembed/cli.py:run",
      "type": "calls",
      "line": 334
    },
    {
      "from": "pytestembed/pytestembed/cli.py:generate",
      "to": "pytestembed/pytestembed/cli.py:insert_blocks_into_file",
      "type": "calls",
      "line": 539
    },
    {
      "from": "pytestembed/pytestembed/cli.py:main",
      "to": "pytestembed/pytestembed/cli.py:cli",
      "type": "calls",
      "line": 630
    },
    {
      "from": "pytestembed/pytestembed/utils.py:is_file_cached",
      "to": "pytestembed/pytestembed/utils.py:get_file_hash",
      "type": "calls",
      "line": 22
    },
    {
      "from": "pytestembed/pytestembed/utils.py:is_file_cached",
      "to": "pytestembed/pytestembed/utils.py:get_cache_dir",
      "type": "calls",
      "line": 22
    },
    {
      "from": "pytestembed/pytestembed/utils.py:cache_file_hash",
      "to": "pytestembed/pytestembed/utils.py:get_file_hash",
      "type": "calls",
      "line": 37
    },
    {
      "from": "pytestembed/pytestembed/utils.py:cache_file_hash",
      "to": "pytestembed/pytestembed/utils.py:get_cache_dir",
      "type": "calls",
      "line": 37
    },
    {
      "from": "pytestembed/pytestembed/error_handler.py:ErrorHandler.__init__",
      "to": "pytestembed/pytestembed/error_handler.py:ErrorHandler._setup_recovery_strategies",
      "type": "calls",
      "line": 53
    },
    {
      "from": "pytestembed/pytestembed/error_handler.py:ErrorHandler.__init__",
      "to": "pytestembed/pytestembed/error_handler.py:ErrorHandler._setup_logging",
      "type": "calls",
      "line": 53
    },
    {
      "from": "pytestembed/pytestembed/error_handler.py:ErrorHandler.handle_error",
      "to": "pytestembed/pytestembed/error_handler.py:ErrorHandler._detect_recovery_strategy",
      "type": "calls",
      "line": 112
    },
    {
      "from": "pytestembed/pytestembed/error_handler.py:ErrorHandler.with_error_handling",
      "to": "pytestembed/pytestembed/error_handler.py:ErrorHandler.handle_error",
      "type": "calls",
      "line": 257
    },
    {
      "from": "pytestembed/pytestembed/error_handler.py:ErrorHandler.safe_execute",
      "to": "pytestembed/pytestembed/error_handler.py:ErrorHandler.handle_error",
      "type": "calls",
      "line": 280
    },
    {
      "from": "pytestembed/pytestembed/error_handler.py:with_error_recovery",
      "to": "pytestembed/pytestembed/error_handler.py:get_error_handler",
      "type": "calls",
      "line": 312
    },
    {
      "from": "pytestembed/pytestembed/error_handler.py:safe_import",
      "to": "pytestembed/pytestembed/error_handler.py:get_error_handler",
      "type": "calls",
      "line": 329
    },
    {
      "from": "pytestembed/pytestembed/error_handler.py:safe_file_operation",
      "to": "pytestembed/pytestembed/error_handler.py:get_error_handler",
      "type": "calls",
      "line": 340
    },
    {
      "from": "pytestembed/pytestembed/error_handler.py:validate_and_recover_json",
      "to": "pytestembed/pytestembed/error_handler.py:get_error_handler",
      "type": "calls",
      "line": 358
    },
    {
      "from": "pytestembed/pytestembed/error_handler.py:get_error_handler",
      "to": "pytestembed/pytestembed/error_handler.py:ErrorHandler",
      "type": "calls",
      "line": 392
    },
    {
      "from": "pytestembed/pytestembed/doc_generator.py:DocGenerator.generate_docs",
      "to": "pytestembed/pytestembed/doc_generator.py:DocGenerator._generate_class_docs",
      "type": "calls",
      "line": 19
    },
    {
      "from": "pytestembed/pytestembed/doc_generator.py:DocGenerator.generate_docs",
      "to": "pytestembed/pytestembed/doc_generator.py:DocGenerator._generate_function_docs",
      "type": "calls",
      "line": 19
    },
    {
      "from": "pytestembed/pytestembed/doc_generator.py:DocGenerator.generate_docs",
      "to": "pytestembed/pytestembed/doc_generator.py:DocGenerator._extract_doc_content",
      "type": "calls",
      "line": 19
    },
    {
      "from": "pytestembed/pytestembed/doc_generator.py:DocGenerator._generate_class_docs",
      "to": "pytestembed/pytestembed/doc_generator.py:DocGenerator._generate_method_docs",
      "type": "calls",
      "line": 50
    },
    {
      "from": "pytestembed/pytestembed/doc_generator.py:DocGenerator._generate_class_docs",
      "to": "pytestembed/pytestembed/doc_generator.py:DocGenerator._extract_doc_content",
      "type": "calls",
      "line": 50
    },
    {
      "from": "pytestembed/pytestembed/doc_generator.py:DocGenerator._generate_method_docs",
      "to": "pytestembed/pytestembed/doc_generator.py:DocGenerator._extract_doc_content",
      "type": "calls",
      "line": 74
    },
    {
      "from": "pytestembed/pytestembed/doc_generator.py:DocGenerator._generate_function_docs",
      "to": "pytestembed/pytestembed/doc_generator.py:DocGenerator._extract_doc_content",
      "type": "calls",
      "line": 100
    },
    {
      "from": "pytestembed/pytestembed/doc_generator.py:DocGenerator._extract_doc_content",
      "to": "pytestembed/pytestembed/doc_generator.py:DocGenerator._enhance_text",
      "type": "calls",
      "line": 125
    },
    {
      "from": "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer.enhance_documentation",
      "to": "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer._parse_ai_documentation",
      "type": "calls",
      "line": 21
    },
    {
      "from": "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer.enhance_documentation",
      "to": "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer._create_documentation_prompt",
      "type": "calls",
      "line": 21
    },
    {
      "from": "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer.enhance_documentation",
      "to": "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer._generate_fallback_documentation",
      "type": "calls",
      "line": 21
    },
    {
      "from": "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer._create_documentation_prompt",
      "to": "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer._extract_source_context",
      "type": "calls",
      "line": 46
    },
    {
      "from": "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer._parse_ai_documentation",
      "to": "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer._split_into_sentences",
      "type": "calls",
      "line": 119
    },
    {
      "from": "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer.__init__",
      "to": "pytestembed/pytestembed/ai_doc_enhancer.py:AIDocumentationEnhancer",
      "type": "calls",
      "line": 196
    },
    {
      "from": "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer.generate_comprehensive_documentation",
      "to": "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer._analyze_code_structure",
      "type": "calls",
      "line": 199
    },
    {
      "from": "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer.generate_comprehensive_documentation",
      "to": "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer._generate_enhanced_documentation",
      "type": "calls",
      "line": 199
    },
    {
      "from": "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer._generate_enhanced_documentation",
      "to": "pytestembed/pytestembed/ai_doc_enhancer.py:SmartDocumentationEnhancer._create_enhanced_documentation_prompt",
      "type": "calls",
      "line": 257
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:IncrementalParser.parse_incrementally",
      "to": "pytestembed/pytestembed/performance_optimizer.py:IncrementalParser.needs_reparsing",
      "type": "calls",
      "line": 67
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:IncrementalParser.parse_incrementally",
      "to": "pytestembed/pytestembed/performance_optimizer.py:IncrementalParser.get_modified_functions",
      "type": "calls",
      "line": 67
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.should_cleanup",
      "to": "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.get_memory_usage_mb",
      "type": "calls",
      "line": 218
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.register_object",
      "to": "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.should_cleanup",
      "type": "calls",
      "line": 244
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.register_object",
      "to": "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer.cleanup_memory",
      "type": "calls",
      "line": 244
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.start",
      "to": "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.start",
      "type": "calls",
      "line": 278
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.submit_task",
      "to": "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.start",
      "type": "calls",
      "line": 324
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.wait_for_task",
      "to": "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.is_task_complete",
      "type": "calls",
      "line": 339
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.wait_for_task",
      "to": "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor.get_result",
      "type": "calls",
      "line": 339
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:get_incremental_parser",
      "to": "pytestembed/pytestembed/performance_optimizer.py:IncrementalParser",
      "type": "calls",
      "line": 411
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:get_parallel_executor",
      "to": "pytestembed/pytestembed/performance_optimizer.py:ParallelExecutor",
      "type": "calls",
      "line": 418
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:get_memory_optimizer",
      "to": "pytestembed/pytestembed/performance_optimizer.py:MemoryOptimizer",
      "type": "calls",
      "line": 425
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:get_background_processor",
      "to": "pytestembed/pytestembed/performance_optimizer.py:BackgroundProcessor",
      "type": "calls",
      "line": 432
    },
    {
      "from": "pytestembed/pytestembed/performance_optimizer.py:get_performance_monitor",
      "to": "pytestembed/pytestembed/performance_optimizer.py:PerformanceMonitor",
      "type": "calls",
      "line": 439
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer.init_project",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._create_example_files",
      "type": "calls",
      "line": 30
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer.init_project",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._finalize_setup",
      "type": "calls",
      "line": 30
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer.init_project",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._create_documentation",
      "type": "calls",
      "line": 30
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer.init_project",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._setup_ide_config",
      "type": "calls",
      "line": 30
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer.init_project",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._setup_dependencies",
      "type": "calls",
      "line": 30
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer.init_project",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._create_config_files",
      "type": "calls",
      "line": 30
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer.init_project",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._setup_ci_cd",
      "type": "calls",
      "line": 30
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer.init_project",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._setup_git",
      "type": "calls",
      "line": 30
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer.init_project",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._create_project_structure",
      "type": "calls",
      "line": 30
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer.init_project",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._print_next_steps",
      "type": "calls",
      "line": 30
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer._create_config_files",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._create_env_file",
      "type": "calls",
      "line": 100
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer._create_config_files",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._create_pixi_config",
      "type": "calls",
      "line": 100
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer._create_example_files",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._create_basic_examples",
      "type": "calls",
      "line": 201
    },
    {
      "from": "pytestembed/pytestembed/init.py:ProjectInitializer._setup_ide_config",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer._setup_vscode",
      "type": "calls",
      "line": 364
    },
    {
      "from": "pytestembed/pytestembed/init.py:init_command",
      "to": "pytestembed/pytestembed/init.py:ProjectInitializer",
      "type": "calls",
      "line": 785
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.lint_file",
      "to": "pytestembed/pytestembed/linter.py:LintIssue",
      "type": "calls",
      "line": 53
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.lint_file",
      "to": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.lint_content",
      "type": "calls",
      "line": 53
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.lint_content",
      "to": "pytestembed/pytestembed/linter.py:LintIssue",
      "type": "calls",
      "line": 70
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.lint_content",
      "to": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_function",
      "type": "calls",
      "line": 70
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.lint_content",
      "to": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_pytestembed_syntax",
      "type": "calls",
      "line": 70
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter.lint_content",
      "to": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_python_syntax",
      "type": "calls",
      "line": 70
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_python_syntax",
      "to": "pytestembed/pytestembed/linter.py:LintIssue",
      "type": "calls",
      "line": 101
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_pytestembed_syntax",
      "to": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_doc_line",
      "type": "calls",
      "line": 112
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_pytestembed_syntax",
      "to": "pytestembed/pytestembed/linter.py:LintIssue",
      "type": "calls",
      "line": 112
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_pytestembed_syntax",
      "to": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_test_line",
      "type": "calls",
      "line": 112
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_test_line",
      "to": "pytestembed/pytestembed/linter.py:LintIssue",
      "type": "calls",
      "line": 157
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_function",
      "to": "pytestembed/pytestembed/linter.py:LintIssue",
      "type": "calls",
      "line": 216
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_function",
      "to": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_doc_block_quality",
      "type": "calls",
      "line": 216
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_function",
      "to": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_test_block_quality",
      "type": "calls",
      "line": 216
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_test_block_quality",
      "to": "pytestembed/pytestembed/linter.py:LintIssue",
      "type": "calls",
      "line": 247
    },
    {
      "from": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter._check_doc_block_quality",
      "to": "pytestembed/pytestembed/linter.py:LintIssue",
      "type": "calls",
      "line": 275
    },
    {
      "from": "pytestembed/pytestembed/linter.py:lint_file",
      "to": "pytestembed/pytestembed/linter.py:PyTestEmbedLinter",
      "type": "calls",
      "line": 337
    },
    {
      "from": "pytestembed/pytestembed/linter.py:lint_file",
      "to": "pytestembed/pytestembed/linter.py:lint_file",
      "type": "calls",
      "line": 337
    },
    {
      "from": "pytestembed/pytestembed/linter.py:lint_directory",
      "to": "pytestembed/pytestembed/linter.py:lint_file",
      "type": "calls",
      "line": 345
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor.__init__",
      "to": "pytestembed/pytestembed/failure_prediction.py:CodeComplexityAnalyzer",
      "type": "calls",
      "line": 172
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor.extract_features",
      "to": "pytestembed/pytestembed/failure_prediction.py:TestFeatures",
      "type": "calls",
      "line": 177
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor.extract_features",
      "to": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor._extract_environmental_characteristics",
      "type": "calls",
      "line": 177
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor.extract_features",
      "to": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor._extract_code_characteristics",
      "type": "calls",
      "line": 177
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor.extract_features",
      "to": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor._extract_test_characteristics",
      "type": "calls",
      "line": 177
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor.extract_features",
      "to": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor._extract_function_code",
      "type": "calls",
      "line": 177
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor.extract_features",
      "to": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor._extract_historical_characteristics",
      "type": "calls",
      "line": 177
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor.extract_features",
      "to": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor._extract_change_characteristics",
      "type": "calls",
      "line": 177
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor.__init__",
      "to": "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor._initialize_weights",
      "type": "calls",
      "line": 474
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor.update_weights",
      "to": "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor._features_to_values",
      "type": "calls",
      "line": 529
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor.update_weights",
      "to": "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor.predict_failure",
      "type": "calls",
      "line": 529
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor.__init__",
      "to": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor._load_prediction_history",
      "type": "calls",
      "line": 564
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor.__init__",
      "to": "pytestembed/pytestembed/failure_prediction.py:SimpleMLPredictor",
      "type": "calls",
      "line": 564
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor.__init__",
      "to": "pytestembed/pytestembed/failure_prediction.py:HeuristicPredictor",
      "type": "calls",
      "line": 564
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor.__init__",
      "to": "pytestembed/pytestembed/failure_prediction.py:TestFeatureExtractor",
      "type": "calls",
      "line": 564
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor.predict_test_failure",
      "to": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor._generate_recommendation",
      "type": "calls",
      "line": 572
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor.predict_test_failure",
      "to": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor._save_prediction_history",
      "type": "calls",
      "line": 572
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor.predict_test_failure",
      "to": "pytestembed/pytestembed/failure_prediction.py:FailurePrediction",
      "type": "calls",
      "line": 572
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor.update_with_results",
      "to": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor._save_prediction_history",
      "type": "calls",
      "line": 614
    },
    {
      "from": "pytestembed/pytestembed/failure_prediction.py:predict_test_failures",
      "to": "pytestembed/pytestembed/failure_prediction.py:FailurePredictor",
      "type": "calls",
      "line": 706
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.__init__",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_widgets",
      "type": "calls",
      "line": 18
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.__init__",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.load_current_config",
      "type": "calls",
      "line": 18
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.__init__",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.setup_variables",
      "type": "calls",
      "line": 18
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_widgets",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_general_tab",
      "type": "calls",
      "line": 66
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_widgets",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_ai_tab",
      "type": "calls",
      "line": 66
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_widgets",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_prompts_tab",
      "type": "calls",
      "line": 66
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_widgets",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_bottom_buttons",
      "type": "calls",
      "line": 66
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_widgets",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_advanced_tab",
      "type": "calls",
      "line": 66
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_ai_tab",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.refresh_models",
      "type": "calls",
      "line": 81
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.create_advanced_tab",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.add_status",
      "type": "calls",
      "line": 273
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.load_current_config",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.refresh_models",
      "type": "calls",
      "line": 306
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.load_current_config",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.load_current_prompt",
      "type": "calls",
      "line": 306
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.on_provider_changed",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.add_status",
      "type": "calls",
      "line": 356
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.on_prompt_type_changed",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.save_current_prompt",
      "type": "calls",
      "line": 361
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.on_prompt_type_changed",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.load_current_prompt",
      "type": "calls",
      "line": 361
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.reset_current_prompt",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.add_status",
      "type": "calls",
      "line": 372
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.refresh_models",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.add_status",
      "type": "calls",
      "line": 392
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.test_connection",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.add_status",
      "type": "calls",
      "line": 410
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.browse_python_interpreter",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.add_status",
      "type": "calls",
      "line": 425
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.apply_config",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.add_status",
      "type": "calls",
      "line": 436
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.apply_config",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.save_current_prompt",
      "type": "calls",
      "line": 436
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.save_config",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.apply_config",
      "type": "calls",
      "line": 476
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.save_config",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.save_config",
      "type": "calls",
      "line": 476
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.save_config",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.add_status",
      "type": "calls",
      "line": 476
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.export_config",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.export_config",
      "type": "calls",
      "line": 487
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.export_config",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.add_status",
      "type": "calls",
      "line": 487
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.import_config",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.load_current_config",
      "type": "calls",
      "line": 502
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.import_config",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.import_config",
      "type": "calls",
      "line": 502
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.import_config",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.add_status",
      "type": "calls",
      "line": 502
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.reset_to_defaults",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.add_status",
      "type": "calls",
      "line": 517
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.reset_to_defaults",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.load_current_config",
      "type": "calls",
      "line": 517
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:ConfigGUI.reset_to_defaults",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI.reset_to_defaults",
      "type": "calls",
      "line": 517
    },
    {
      "from": "pytestembed/pytestembed/config_gui.py:launch_config_gui",
      "to": "pytestembed/pytestembed/config_gui.py:ConfigGUI",
      "type": "calls",
      "line": 536
    },
    {
      "from": "pytestembed/pytestembed/ai_integration.py:LMStudioProvider.generate_completion",
      "to": "pytestembed/pytestembed/ai_integration.py:AIProviderError",
      "type": "calls",
      "line": 100
    },
    {
      "from": "pytestembed/pytestembed/ai_integration.py:AIManager.__init__",
      "to": "pytestembed/pytestembed/ai_integration.py:AIManager._load_configuration",
      "type": "calls",
      "line": 159
    },
    {
      "from": "pytestembed/pytestembed/ai_integration.py:AIManager._load_configuration",
      "to": "pytestembed/pytestembed/ai_integration.py:LMStudioProvider",
      "type": "calls",
      "line": 165
    },
    {
      "from": "pytestembed/pytestembed/ai_integration.py:AIManager._load_configuration",
      "to": "pytestembed/pytestembed/ai_integration.py:OllamaProvider",
      "type": "calls",
      "line": 165
    },
    {
      "from": "pytestembed/pytestembed/ai_integration.py:AIManager.generate_completion",
      "to": "pytestembed/pytestembed/ai_integration.py:AIManager.get_provider",
      "type": "calls",
      "line": 212
    },
    {
      "from": "pytestembed/pytestembed/ai_integration.py:AIManager.generate_completion",
      "to": "pytestembed/pytestembed/ai_integration.py:AIProviderError",
      "type": "calls",
      "line": 212
    },
    {
      "from": "pytestembed/pytestembed/ai_integration.py:AIManager.generate_completion",
      "to": "pytestembed/pytestembed/ai_integration.py:AIManager.generate_completion",
      "type": "calls",
      "line": 212
    },
    {
      "from": "pytestembed/pytestembed/ai_integration.py:AIManager.generate_contextualized_completion",
      "to": "pytestembed/pytestembed/ai_integration.py:AIManager.get_provider",
      "type": "calls",
      "line": 220
    },
    {
      "from": "pytestembed/pytestembed/ai_integration.py:AIManager.generate_contextualized_completion",
      "to": "pytestembed/pytestembed/ai_integration.py:AIProviderError",
      "type": "calls",
      "line": 220
    },
    {
      "from": "pytestembed/pytestembed/ai_integration.py:AIManager.generate_contextualized_completion",
      "to": "pytestembed/pytestembed/ai_integration.py:AIManager.generate_completion",
      "type": "calls",
      "line": 220
    }
  ]
}